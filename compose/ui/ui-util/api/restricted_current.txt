// Signature format: 4.0
package androidx.compose.ui {

  @SuppressCompatibility @kotlin.RequiresOptIn(message="This API is experimental and is likely to change in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface ExperimentalComposeUiApi {
  }

  @SuppressCompatibility @kotlin.RequiresOptIn(message="Unstable API for use only between compose-ui modules sharing the same exact version, " + "subject to change without notice in major, minor, or patch releases.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) public @interface InternalComposeUiApi {
  }

}

package androidx.compose.ui.util {

  public final class AndroidTrace_androidKt {
    method public static inline <T> T trace(String sectionName, kotlin.jvm.functions.Function0<? extends T> block);
  }

  public final class InlineClassHelperKt {
    method public static inline long packFloats(float val1, float val2);
    method public static inline long packInts(int val1, int val2);
    method public static inline float unpackAbsFloat1(long value);
    method public static inline float unpackAbsFloat2(long value);
    method public static inline float unpackFloat1(long value);
    method public static inline float unpackFloat2(long value);
    method public static inline int unpackInt1(long value);
    method public static inline int unpackInt2(long value);
  }

  public final class InlineClassHelper_jvmKt {
    method public static inline double doubleFromBits(long bits);
    method public static inline int fastRoundToInt(double);
    method public static inline int fastRoundToInt(float);
    method public static inline float floatFromBits(int bits);
  }

  public final class ListUtilsKt {
    method public static inline <T> boolean fastAll(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> predicate);
    method public static inline <T> boolean fastAny(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> predicate);
    method public static inline <T, K> java.util.List<T> fastDistinctBy(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,? extends K> selector);
    method public static inline <T> java.util.List<T> fastFilter(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> predicate);
    method public static <T> java.util.List<T> fastFilterNotNull(java.util.List<? extends T?>);
    method public static inline <T> T fastFirst(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> predicate);
    method public static inline <T> T? fastFirstOrNull(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> predicate);
    method public static inline <T, R> java.util.List<R> fastFlatMap(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,? extends java.lang.Iterable<? extends R>> transform);
    method public static inline <T, R> R fastFold(java.util.List<? extends T>, R initial, kotlin.jvm.functions.Function2<? super R,? super T,? extends R> operation);
    method public static inline <T> void fastForEach(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> action);
    method public static inline <T> void fastForEachIndexed(java.util.List<? extends T>, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,kotlin.Unit> action);
    method public static inline <T> void fastForEachReversed(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,kotlin.Unit> action);
    method public static <T> String fastJoinToString(java.util.List<? extends T>, optional CharSequence separator, optional CharSequence prefix, optional CharSequence postfix, optional int limit, optional CharSequence truncated, optional kotlin.jvm.functions.Function1<? super T,? extends java.lang.CharSequence>? transform);
    method public static inline <T> T? fastLastOrNull(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> predicate);
    method public static inline <T, R> java.util.List<R> fastMap(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,? extends R> transform);
    method public static inline <T, R> java.util.List<R> fastMapIndexed(java.util.List<? extends T>, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends R> transform);
    method public static inline <T, R> java.util.List<R> fastMapIndexedNotNull(java.util.List<? extends T>, kotlin.jvm.functions.Function2<? super java.lang.Integer,? super T,? extends R?> transform);
    method public static inline <T, R> java.util.List<R> fastMapNotNull(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,? extends R?> transform);
    method public static inline <T, R, C extends java.util.Collection<? super R>> C fastMapTo(java.util.List<? extends T>, C destination, kotlin.jvm.functions.Function1<? super T,? extends R> transform);
    method public static inline <T, R extends java.lang.Comparable<? super R>> T? fastMaxBy(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,? extends R> selector);
    method public static inline <T, R extends java.lang.Comparable<? super R>> R? fastMaxOfOrNull(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,? extends R> selector);
    method public static inline <T, R extends java.lang.Comparable<? super R>> T? fastMinByOrNull(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,? extends R> selector);
    method public static inline <S, T extends S> S fastReduce(java.util.List<? extends T>, kotlin.jvm.functions.Function2<? super S,? super T,? extends S> operation);
    method public static inline <T> int fastSumBy(java.util.List<? extends T>, kotlin.jvm.functions.Function1<? super T,java.lang.Integer> selector);
    method public static inline <T, R, V> java.util.List<V> fastZip(java.util.List<? extends T>, java.util.List<? extends R> other, kotlin.jvm.functions.Function2<? super T,? super R,? extends V> transform);
    method public static inline <T, R> java.util.List<R> fastZipWithNext(java.util.List<? extends T>, kotlin.jvm.functions.Function2<? super T,? super T,? extends R> transform);
  }

  public final class MathHelpersKt {
    method public static float fastCbrt(float x);
    method public static inline double fastCoerceAtLeast(double, double minimumValue);
    method public static inline float fastCoerceAtLeast(float, float minimumValue);
    method public static inline double fastCoerceAtMost(double, double maximumValue);
    method public static inline float fastCoerceAtMost(float, float maximumValue);
    method public static inline double fastCoerceIn(double, double minimumValue, double maximumValue);
    method public static inline float fastCoerceIn(float, float minimumValue, float maximumValue);
    method public static inline float fastMaxOf(float a, float b, float c, float d);
    method public static inline float fastMinOf(float a, float b, float c, float d);
    method public static float lerp(float start, float stop, float fraction);
    method public static int lerp(int start, int stop, float fraction);
    method public static long lerp(long start, long stop, float fraction);
  }

}

