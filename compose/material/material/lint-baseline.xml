<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.3.0-beta01" type="baseline" client="gradle" dependencies="false" name="AGP (8.3.0-beta01)" variant="all" version="8.3.0-beta01">

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/BottomNavigationScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/ButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/CheckboxScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/FloatingActionButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/NavigationRailScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="    Thread.sleep(1)"
        errorLine2="           ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/ObservableThemeTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/RadioButtonScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(300)"
        errorLine2="               ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/SwitchScreenshotTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(300)"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidInstrumentedTest/kotlin/androidx/compose/material/TabScreenshotTest.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions with a return type should start with a lowercase letter"
        errorLine1="    fun Url("
        errorLine2="        ~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Text.kt"/>
    </issue>

    <issue
        id="ComposableNaming"
        message="Composable functions with a return type should start with a lowercase letter"
        errorLine1="    fun Clickable("
        errorLine2="        ~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Text.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable crossAxisSizes with type List&lt;Integer>: replace with IntList"
        errorLine1="        val crossAxisSizes = mutableListOf&lt;Int>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/AlertDialog.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable crossAxisPositions with type List&lt;Integer>: replace with IntList"
        errorLine1="        val crossAxisPositions = mutableListOf&lt;Int>()"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/AlertDialog.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field anchors with type Map&lt;T, Float>: replace with ObjectFloatMap"
        errorLine1="    internal val anchors = mutableMapOf&lt;T, Float>()"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/AnchoredDraggable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;T, Float> of getAnchors$lint_module: replace with ObjectFloatMap"
        errorLine1="    internal val anchors = mutableMapOf&lt;T, Float>()"
        errorLine2="                 ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/AnchoredDraggable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="constructor MapDraggableAnchors has parameter anchors with type Map&lt;T, Float>: replace with ObjectFloatMap"
        errorLine1="private class MapDraggableAnchors&lt;T>(private val anchors: Map&lt;T, Float>) : DraggableAnchors&lt;T> {"
        errorLine2="                                                          ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/AnchoredDraggable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="field anchors with type Map&lt;T, Float>: replace with ObjectFloatMap"
        errorLine1="private class MapDraggableAnchors&lt;T>(private val anchors: Map&lt;T, Float>) : DraggableAnchors&lt;T> {"
        errorLine2="                                                          ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/AnchoredDraggable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method BaselinesOffsetColumn has parameter offsets with type List&lt;Dp>: replace with FloatList"
        errorLine1="    offsets: List&lt;Dp>,"
        errorLine2="             ~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/ListItem.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable tickFractions with type List&lt;? extends Float>: replace with FloatList"
        errorLine1="    val tickFractions = remember(steps) {"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable tickFractions with type List&lt;? extends Float>: replace with FloatList"
        errorLine1="    val tickFractions = remember(steps) {"
        errorLine2="    ^">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method SliderImpl has parameter tickFractions with type List&lt;Float>: replace with FloatList"
        errorLine1="    tickFractions: List&lt;Float>,"
        errorLine2="                   ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method RangeSliderImpl has parameter tickFractions with type List&lt;Float>: replace with FloatList"
        errorLine1="    tickFractions: List&lt;Float>,"
        errorLine2="                   ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method Track has parameter tickFractions with type List&lt;Float>: replace with FloatList"
        errorLine1="    tickFractions: List&lt;Float>,"
        errorLine2="                   ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method snapValueToTick has parameter tickFractions with type List&lt;Float>: replace with FloatList"
        errorLine1="    tickFractions: List&lt;Float>,"
        errorLine2="                   ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Float> of stepsToTickFractions: replace with FloatList"
        errorLine1="private fun stepsToTickFractions(steps: Int): List&lt;Float> {"
        errorLine2="                                              ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Slider.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable anchors with type Map&lt;Float, DismissValue>: replace with FloatObjectMap"
        errorLine1="    val anchors = mutableMapOf(0f to Default)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/SwipeToDismiss.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method setAnchors$lint_module has parameter &lt;set-?> with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    internal var anchors by mutableStateOf(emptyMap&lt;Float, T>())"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type Map&lt;Float, T> of getAnchors$lint_module: replace with FloatObjectMap"
        errorLine1="    internal var anchors by mutableStateOf(emptyMap&lt;Float, T>())"
        errorLine2="                 ~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method ensureInit$lint_module has parameter newAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    internal fun ensureInit(newAnchors: Map&lt;Float, T>) {"
        errorLine2="                                        ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method processNewAnchors$lint_module has parameter oldAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="        oldAnchors: Map&lt;Float, T>,"
        errorLine2="                    ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method processNewAnchors$lint_module has parameter newAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="        newAnchors: Map&lt;Float, T>"
        errorLine2="                    ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable bounds with type List&lt;? extends Float>: replace with FloatList"
        errorLine1="            val bounds = findBounds(offset.value, anchors.keys)"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method swipeable has parameter anchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="    anchors: Map&lt;Float, T>,"
        errorLine2="             ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable oldAnchors with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="        val oldAnchors = state.anchors"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method findBounds has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="    anchors: Set&lt;Float>"
        errorLine2="             ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="return type List&lt;Float> of findBounds: replace with FloatList"
        errorLine1="): List&lt;Float> {"
        errorLine2="   ~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method computeTarget has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="    anchors: Set&lt;Float>,"
        errorLine2="             ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="variable bounds with type List&lt;? extends Float>: replace with FloatList"
        errorLine1="    val bounds = findBounds(offset, anchors)"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method getOffset has parameter $this$getOffset with type Map&lt;Float, ? extends T>: replace with FloatObjectMap"
        errorLine1="private fun &lt;T> Map&lt;Float, T>.getOffset(state: T): Float? {"
        errorLine2="                ~~~~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

    <issue
        id="PrimitiveInCollection"
        message="method resistanceConfig has parameter anchors with type Set&lt;Float>: replace with FloatSet"
        errorLine1="        anchors: Set&lt;Float>,"
        errorLine2="                 ~~~~~~~~~~">
        <location
            file="src/commonMain/kotlin/androidx/compose/material/Swipeable.kt"/>
    </issue>

</issues>
