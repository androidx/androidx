// Signature format: 4.0
package androidx.benchmark.macro {

  @RequiresApi(29) public final class Api29Kt {
  }

  public final class BaselineProfilesKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static void collectBaselineProfile(String uniqueName, String packageName, kotlin.jvm.functions.Function1<? super androidx.benchmark.macro.MacrobenchmarkScope,kotlin.Unit> setupBlock, kotlin.jvm.functions.Function1<? super androidx.benchmark.macro.MacrobenchmarkScope,kotlin.Unit> profileBlock);
  }

  public abstract sealed class CompilationMode {
  }

  public static final class CompilationMode.BaselineProfile extends androidx.benchmark.macro.CompilationMode {
    field public static final androidx.benchmark.macro.CompilationMode.BaselineProfile INSTANCE;
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static final class CompilationMode.Interpreted extends androidx.benchmark.macro.CompilationMode {
  }

  public static final class CompilationMode.None extends androidx.benchmark.macro.CompilationMode {
    field public static final androidx.benchmark.macro.CompilationMode.None INSTANCE;
  }

  public static final class CompilationMode.Speed extends androidx.benchmark.macro.CompilationMode {
    field public static final androidx.benchmark.macro.CompilationMode.Speed INSTANCE;
  }

  public static final class CompilationMode.SpeedProfile extends androidx.benchmark.macro.CompilationMode {
    ctor public CompilationMode.SpeedProfile(optional int warmupIterations);
    method public int getWarmupIterations();
    property public final int warmupIterations;
  }

  public final class CompilationModeKt {
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static boolean isSupportedWithVmSettings(androidx.benchmark.macro.CompilationMode);
  }

  @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public final class FrameTimingGfxInfoMetric extends androidx.benchmark.macro.Metric {
    ctor public FrameTimingGfxInfoMetric();
  }

  public final class FrameTimingMetric extends androidx.benchmark.macro.Metric {
    ctor public FrameTimingMetric();
  }

  public final class IdeSummaryStringKt {
  }

  public final class IterationResultKt {
  }

  public final class MacrobenchmarkKt {
  }

  public final class MacrobenchmarkScope {
    ctor public MacrobenchmarkScope(String packageName, boolean launchWithClearTask);
    method public void dropKernelPageCache();
    method public void killProcess();
    method public void pressHome(optional long delayDurationMs);
    method public void startActivityAndWait(optional kotlin.jvm.functions.Function1<? super android.content.Intent,kotlin.Unit> block);
    method public void startActivityAndWait(android.content.Intent intent);
  }

  public abstract sealed class Metric {
  }

  public final class MetricResultExtensionsKt {
  }

  public enum StartupMode {
    enum_constant public static final androidx.benchmark.macro.StartupMode COLD;
    enum_constant public static final androidx.benchmark.macro.StartupMode HOT;
    enum_constant public static final androidx.benchmark.macro.StartupMode WARM;
  }

  @RequiresApi(29) public final class StartupTimingMetric extends androidx.benchmark.macro.Metric {
    ctor public StartupTimingMetric();
  }

  public final class TagKt {
  }

}

