// Signature format: 4.0
package androidx.collection {

  public class ArrayMap<K, V> extends androidx.collection.SimpleArrayMap<K,V> implements java.util.Map<K,V> {
    ctor public ArrayMap();
    ctor public ArrayMap(int);
    ctor public ArrayMap(androidx.collection.SimpleArrayMap<K!,V!>);
    method public boolean containsAll(java.util.Collection<?>);
    method public boolean containsKey(Object?);
    method public boolean containsValue(Object);
    method public java.util.Set<java.util.Map.Entry<K!,V!>!> entrySet();
    method public V? get(Object);
    method public java.util.Set<K!> keySet();
    method public void putAll(java.util.Map<? extends K,? extends V>);
    method public V? remove(Object);
    method public boolean removeAll(java.util.Collection<?>);
    method public boolean retainAll(java.util.Collection<?>);
    method public java.util.Collection<V!> values();
  }

  public final class ArrayMap_Ext {
  }

  public final class ArraySet<E> implements java.util.Collection<E> kotlin.jvm.internal.markers.KMutableCollection kotlin.jvm.internal.markers.KMutableSet java.util.Set<E> {
    ctor public ArraySet(optional int capacity);
    ctor public ArraySet();
    ctor public ArraySet(androidx.collection.ArraySet<? extends E>? set);
    ctor public ArraySet(java.util.Collection<? extends E>? set);
    method public boolean add(E? element);
    method public boolean addAll(java.util.Collection<? extends E> elements);
    method public void addAll(androidx.collection.ArraySet<E> elements);
    method public void clear();
    method public operator boolean contains(E? element);
    method public boolean containsAll(java.util.Collection<E!> elements);
    method public void ensureCapacity(int minimumCapacity);
    method public int getSize();
    method public int indexOf(E? element);
    method public boolean isEmpty();
    method public java.util.Iterator<E> iterator();
    method public boolean remove(E? element);
    method public boolean removeAll(java.util.Collection<E!> elements);
    method public boolean removeAll(androidx.collection.ArraySet<? extends E> elements);
    method public E? removeAt(int index);
    method public boolean retainAll(java.util.Collection<E!> elements);
    method public E? valueAt(int index);
    property public int size;
  }

  public final class CircularArray<E> {
    ctor public CircularArray(optional int minCapacity);
    ctor public CircularArray();
    method public void addFirst(E? e);
    method public void addLast(E? e);
    method public void clear();
    method public operator E! get(int n);
    method public E! getFirst();
    method public E! getLast();
    method public boolean isEmpty();
    method public E! popFirst();
    method public E! popLast();
    method public void removeFromEnd(int numOfElements);
    method public void removeFromStart(int numOfElements);
    method public int size();
    property public E! first;
    property public E! last;
    property public int size;
  }

  public final class CircularIntArray {
    ctor public CircularIntArray(optional int minCapacity);
    ctor public CircularIntArray();
    method public void addFirst(int e);
    method public void addLast(int e);
    method public void clear();
    method public operator int get(int n);
    method public int getFirst();
    method public int getLast();
    method public boolean isEmpty();
    method public int popFirst();
    method public int popLast();
    method public void removeFromEnd(int numOfElements);
    method public void removeFromStart(int numOfElements);
    method public int size();
    property public int first;
    property public int last;
    property public int size;
  }

  public final class ContainerHelpersKt {
  }

  public class LongSparseArray<E> implements java.lang.Cloneable {
    ctor public LongSparseArray(int initialCapacity);
    ctor public LongSparseArray(androidx.collection.LongSparseArray<E> array);
    method public void append(long key, E? value);
    method public void clear();
    method public androidx.collection.LongSparseArray<E> clone();
    method public boolean containsKey(long key);
    method public boolean containsValue(E? value);
    method @Deprecated public void delete(long key);
    method public operator E? get(long key);
    method public E! get(long key, E? default);
    method public int indexOfKey(long key);
    method public int indexOfValue(E? value);
    method public boolean isEmpty();
    method public long keyAt(int index);
    method public void put(long key, E? value);
    method public void putAll(androidx.collection.LongSparseArray<? extends E> other);
    method public E? putIfAbsent(long key, E? value);
    method public void remove(long key);
    method public boolean remove(long key, Object? value);
    method public void removeAt(int index);
    method public E? replace(long key, E? value);
    method public boolean replace(long key, E? oldValue, E? newValue);
    method public void setValueAt(int index, E? value);
    method public int size();
    method public E! valueAt(int index);
    property public int size;
  }

  public final class LongSparseArray_Ext {
  }

  public class LruCache<K, V> {
    ctor public LruCache(int maxSize);
    method protected V? create(K? key);
    method public final int createCount();
    method protected void entryRemoved(boolean evicted, K? key, V? oldValue, V? newValue);
    method public final void evictAll();
    method public final int evictionCount();
    method public final V? get(K? key);
    method public final int hitCount();
    method public final int maxSize();
    method public final int missCount();
    method public final V? put(K? key, V? value);
    method public final int putCount();
    method public final V? remove(K? key);
    method public void resize(int maxSize);
    method public final int size();
    method protected int sizeOf(K? key, V? value);
    method public final java.util.Map<K,V> snapshot();
    method public void trimToSize(int maxSize);
    property public final int size;
  }

  public final class Platform_jvmKt {
  }

  public class SimpleArrayMap<K, V> {
    ctor public SimpleArrayMap(optional int capacity);
    ctor public SimpleArrayMap();
    ctor public SimpleArrayMap(androidx.collection.SimpleArrayMap<K,V>? map);
    method public void clear();
    method public boolean containsKey(K? key);
    method public boolean containsValue(V? value);
    method public void ensureCapacity(int minimumCapacity);
    method public operator V? get(K? key);
    method public V! getOrDefault(K? key, V? defaultValue);
    method protected final int get_size();
    method protected int indexOf(Object key, int hash);
    method public int indexOfKey(Object? key);
    method protected int indexOfNull();
    method public boolean isEmpty();
    method public K! keyAt(int index);
    method public V? put(K? key, V? value);
    method public void putAll(androidx.collection.SimpleArrayMap<? extends K,? extends V> array);
    method public V? putIfAbsent(K? key, V? value);
    method public V? remove(K? key);
    method public boolean remove(K? key, V? value);
    method public V? removeAt(int index);
    method public V? replace(K? key, V? value);
    method public boolean replace(K? key, V? oldValue, V? newValue);
    method public V! setValueAt(int index, V? value);
    method protected final void set_size(int _size);
    method public int size();
    method public V! valueAt(int index);
    property protected final int _size;
    property public int size;
  }

  public final class SimpleArrayMapKt {
  }

  public final class SourceCompatibility_DoNotUseFromJava {
    method @Deprecated public static <E> boolean isEmpty(androidx.collection.ArraySet<E>);
    method @Deprecated public static <E> boolean isEmpty(androidx.collection.CircularArray<E>);
    method @Deprecated public static boolean isEmpty(androidx.collection.CircularIntArray);
    method @Deprecated public static <E> boolean isEmpty(androidx.collection.LongSparseArray<E>);
    method @Deprecated public static <K, V> boolean isEmpty(androidx.collection.SimpleArrayMap<K,V>);
    method @Deprecated public static <E> boolean isEmpty(androidx.collection.SparseArray<E>);
    method @Deprecated public static <E> boolean isEmpty(androidx.collection.SparseArrayCompat<E>);
    method @Deprecated public static <K, V> int size(androidx.collection.ArrayMap<K,V>);
    method @Deprecated public static <E> int size(androidx.collection.ArraySet<E>);
    method @Deprecated public static <E> int size(androidx.collection.CircularArray<E>);
    method @Deprecated public static int size(androidx.collection.CircularIntArray);
    method @Deprecated public static <E> int size(androidx.collection.LongSparseArray<E>);
    method @Deprecated public static <K, V> int size(androidx.collection.LruCache<K,V>);
    method @Deprecated public static <K, V> int size(androidx.collection.SimpleArrayMap<K,V>);
    method @Deprecated public static <E> int size(androidx.collection.SparseArray<E>);
    method @Deprecated public static <E> int size(androidx.collection.SparseArrayCompat<E>);
  }

  public class SparseArray<E> implements java.lang.Cloneable {
    ctor public SparseArray(int initialCapacity);
    ctor public SparseArray(androidx.collection.SparseArray<E> array);
    method public final void append(int key, E? value);
    method public final void clear();
    method public androidx.collection.SparseArray<E> clone();
    method public final boolean containsKey(int key);
    method public final boolean containsValue(E? value);
    method @Deprecated public void delete(int key);
    method public final operator E? get(int key);
    method public final E! get(int key, E? default);
    method public final int indexOfKey(int key);
    method public final int indexOfValue(E? value);
    method public final boolean isEmpty();
    method public final int keyAt(int index);
    method public final void put(int key, E? value);
    method public final void putAll(androidx.collection.SparseArray<? extends E> other);
    method public final E? putIfAbsent(int key, E? value);
    method public final void remove(int key);
    method public final boolean remove(int key, Object? value);
    method public final void removeAt(int index);
    method @Deprecated public void removeAtRange(int index, int count);
    method public final E? replace(int key, E? value);
    method public final boolean replace(int key, E? oldValue, E? newValue);
    method public final void setValueAt(int index, E? value);
    method public int size();
    method public final E! valueAt(int index);
    property public int size;
  }

  @Deprecated public class SparseArrayCompat<E> extends androidx.collection.SparseArray<E> {
    ctor @Deprecated public SparseArrayCompat();
    ctor @Deprecated public SparseArrayCompat(int initialCapacity);
    ctor @Deprecated public SparseArrayCompat(androidx.collection.SparseArray<E> array);
    method @Deprecated public androidx.collection.SparseArrayCompat<E> clone();
    method @Deprecated public void putAll(androidx.collection.SparseArrayCompat<? extends E> other);
  }

  public final class SparseArray_Ext {
  }

}

