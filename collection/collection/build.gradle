/*
 * Copyright 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */
import androidx.build.LibraryType
import androidx.build.PlatformIdentifier
import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType
import org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile
import org.jetbrains.kotlin.konan.target.Family

plugins {
    id("AndroidXPlugin")
}

androidXMultiplatform {
    jvm {
        withJava()
    }
    js {
        browser()
    }
    mac()
    linux()
    ios()
    watchos()
    tvos()
    mingwX64()

    defaultPlatform(PlatformIdentifier.JVM)

    sourceSets {
        configureEach {
            languageSettings.optIn("kotlin.RequiresOptIn")
            languageSettings.optIn("kotlin.contracts.ExperimentalContracts")
        }

        commonMain {
            dependencies {
                api(libs.kotlinStdlib)
                api(project(":annotation:annotation"))
            }
        }

        commonTest {
            dependencies {
                implementation(libs.kotlinTest)
                implementation(libs.kotlinTestAnnotationsCommon)
                implementation(libs.kotlinCoroutinesCore)
                implementation(libs.kotlinCoroutinesTest)
            }
        }

        nonJsMain {
            dependsOn(commonMain)
        }

        nonJsTest {
            dependsOn(commonTest)
        }

        nonJvmMain {
            dependsOn(commonMain)
        }

        nonJvmTest {
            dependsOn(commonTest)
        }

        jvmMain {
            dependsOn(nonJsMain)
        }

        jvmTest {
            dependsOn(nonJsTest)
            dependencies {
                implementation(libs.kotlinTestJunit)
                implementation(libs.truth)
                implementation(project(":internal-testutils-truth"))
            }
        }

        jsMain {
            dependsOn(nonJvmMain)
        }

        jsTest {
            dependsOn(nonJvmTest)
        }

        nativeMain {
            dependsOn(commonMain)
            dependsOn(nonJsMain)
            dependsOn(nonJvmMain)
        }

        nativeTest {
            dependsOn(commonTest)
            dependsOn(nonJsTest)
            dependsOn(nonJvmTest)
        }

        unixMain {
            dependsOn(nativeMain)
        }

        darwinMain {
            dependsOn(unixMain)
        }

        linuxMain {
            dependsOn(unixMain)
        }

        mingwMain {
            dependsOn(nativeMain)
        }


        targets.configureEach { target ->
            if (target.platformType == KotlinPlatformType.native) {
                target.compilations["main"].defaultSourceSet {
                    def konanTargetFamily = target.konanTarget.family
                    if (konanTargetFamily == Family.OSX ||
                            konanTargetFamily == Family.IOS ||
                            konanTargetFamily == Family.WATCHOS ||
                            konanTargetFamily == Family.TVOS) {
                        dependsOn(darwinMain)
                    } else if (konanTargetFamily == Family.LINUX) {
                        dependsOn(linuxMain)
                    } else if (konanTargetFamily == Family.MINGW) {
                        dependsOn(mingwMain)
                    } else {
                        throw new GradleException("unknown native target ${target}")
                    }
                }

                target.compilations["test"].defaultSourceSet {
                    dependsOn(nativeTest)
                }
            }
        }

        // Workaround for https://youtrack.jetbrains.com/issue/KT-51763
        // Make sure commonization runs before any compilation task.
        tasks.withType(KotlinNativeCompile).configureEach {
            it.dependsOn(tasks.named("commonize"))
        }
    }
}

dependencies {
    // Required for users who only depend on this artifact, but pull an older version of
    // collection-ktx transitively, which would lead to duplicate definition since the -ktx
    // extensions were moved into the main artifact.
    constraints {
        jvmMainImplementation("androidx.collection:collection-ktx:1.4.2")
    }
}

androidx {
    name = "collections"
    type = LibraryType.PUBLISHED_LIBRARY
    inceptionYear = "2018"
    description = "Standalone efficient collections."
    metalavaK2UastEnabled = false
}
