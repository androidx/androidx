<?xml version="1.0" encoding="UTF-8"?>
<issues format="6" by="lint 8.3.0-beta01" type="baseline" client="gradle" dependencies="false" name="AGP (8.3.0-beta01)" variant="all" version="8.3.0-beta01">

    <issue
        id="BanSynchronizedMethods"
        message="Use of synchronized methods is not recommended"
        errorLine1="                            @Override"
        errorLine2="                            ^">
        <location
            file="src/main/java/androidx/work/impl/utils/futures/AbstractFuture.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(TEST_TIMEOUT_IN_MS);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/workers/ConstraintTrackingWorkerTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(TEST_TIMEOUT_IN_MS);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/workers/ConstraintTrackingWorkerTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(TEST_TIMEOUT_IN_MS);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/workers/ConstraintTrackingWorkerTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(TEST_TIMEOUT_IN_MS);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/workers/ConstraintTrackingWorkerTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(duration);"
        errorLine2="                   ~~~~~">
        <location
            file="src/main/java/androidx/work/impl/utils/ForceStopRunnable.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="                Thread.sleep(1000L);"
        errorLine2="                       ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/worker/InterruptionAwareWorker.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(sleepDuration);"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/worker/RandomSleepTestWorker.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="                    Thread.sleep(sleepTime)"
        errorLine2="                           ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/utils/SerialExecutorTest.kt"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="            Thread.sleep(SLEEP_DURATION);"
        errorLine2="                   ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/worker/SleepTestWorker.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(5000L);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/background/systemjob/SystemJobServiceTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(5000L);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/background/systemjob/SystemJobServiceTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(1000L);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/background/systemjob/SystemJobServiceTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(1000L);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/background/systemjob/SystemJobServiceTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(SLEEP_DURATION_SMALL_MILLIS);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/WorkManagerImplTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(100); // introduce a small delay"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/background/systemalarm/WorkTimerTest.java"/>
    </issue>

    <issue
        id="BanThreadSleep"
        message="Uses Thread.sleep()"
        errorLine1="        Thread.sleep(200);"
        errorLine2="               ~~~~~">
        <location
            file="src/androidTest/java/androidx/work/impl/background/systemalarm/WorkTimerTest.java"/>
    </issue>

    <issue
        id="ForegroundServiceType"
        message="To call `Service.startForeground()`, the `&lt;service>` element of manifest file must have the `foregroundServiceType` attribute specified"
        errorLine1="                    startForeground(notificationId, notification);"
        errorLine2="                    ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/foreground/SystemForegroundService.java"/>
    </issue>

    <issue
        id="ForegroundServiceType"
        message="To call `Service.startForeground()`, the `&lt;service>` element of manifest file must have the `foregroundServiceType` attribute specified"
        errorLine1="            service.startForeground(id, notification, foregroundServiceType);"
        errorLine2="                    ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/foreground/SystemForegroundService.java"/>
    </issue>

    <issue
        id="ForegroundServiceType"
        message="To call `Service.startForeground()`, the `&lt;service>` element of manifest file must have the `foregroundServiceType` attribute specified"
        errorLine1="                service.startForeground(id, notification, foregroundServiceType);"
        errorLine2="                        ~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/foreground/SystemForegroundService.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    public final void addListener(Runnable listener, Executor executor) {"
        errorLine2="                                  ~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/utils/futures/AbstractFuture.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    public final void addListener(Runnable listener, Executor executor) {"
        errorLine2="                                                     ~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/utils/futures/AbstractFuture.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    protected boolean setException(Throwable throwable) {"
        errorLine2="                                   ~~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/utils/futures/AbstractFuture.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    protected boolean setFuture(ListenableFuture&lt;? extends V> future) {"
        errorLine2="                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/utils/futures/AbstractFuture.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    public static &lt;V> SettableFuture&lt;V> create() {"
        errorLine2="                      ~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/utils/futures/SettableFuture.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    public boolean setException(Throwable throwable) {"
        errorLine2="                                ~~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/utils/futures/SettableFuture.java"/>
    </issue>

    <issue
        id="UnknownNullness"
        message="Unknown nullability; explicitly declare as `@Nullable` or `@NonNull` to improve Kotlin interoperability; see https://developer.android.com/kotlin/interop#nullability_annotations"
        errorLine1="    public boolean setFuture(ListenableFuture&lt;? extends V> future) {"
        errorLine2="                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="src/main/java/androidx/work/impl/utils/futures/SettableFuture.java"/>
    </issue>

</issues>
