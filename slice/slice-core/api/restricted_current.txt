// Signature format: 4.0
package androidx.slice {

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public interface Clock {
    method @Deprecated public long currentTimeMillis();
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class CornerDrawable extends android.graphics.drawable.InsetDrawable {
    ctor @Deprecated public CornerDrawable(android.graphics.drawable.Drawable?, float);
  }

  @Deprecated @androidx.versionedparcelable.VersionedParcelize(allowSerialization=true, isCustom=true) public final class Slice extends androidx.versionedparcelable.CustomVersionedParcelable implements androidx.versionedparcelable.VersionedParcelable {
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static androidx.slice.Slice? bindSlice(android.content.Context, android.net.Uri, java.util.Set<androidx.slice.SliceSpec!>?);
    method @Deprecated public java.util.List<java.lang.String!> getHints();
    method @Deprecated public java.util.List<androidx.slice.SliceItem!> getItems();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.slice.SliceSpec? getSpec();
    method @Deprecated public android.net.Uri getUri();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public boolean hasHint(String);
    field @Deprecated public static final String EXTRA_SELECTION = "android.app.slice.extra.SELECTION";
    field @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static final String SUBTYPE_RANGE_MODE = "range_mode";
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static class Slice.Builder {
    ctor @Deprecated public Slice.Builder(android.net.Uri);
    ctor @Deprecated public Slice.Builder(androidx.slice.Slice.Builder);
    method @Deprecated public androidx.slice.Slice.Builder addAction(android.app.PendingIntent, androidx.slice.Slice, String?);
    method @Deprecated public androidx.slice.Slice.Builder addAction(androidx.slice.Slice, String?, androidx.slice.SliceItem.ActionHandler);
    method @Deprecated public androidx.slice.Slice.Builder addHints(java.lang.String!...);
    method @Deprecated public androidx.slice.Slice.Builder addHints(java.util.List<java.lang.String!>);
    method @Deprecated public androidx.slice.Slice.Builder addIcon(androidx.core.graphics.drawable.IconCompat, String?, java.lang.String!...);
    method @Deprecated public androidx.slice.Slice.Builder addIcon(androidx.core.graphics.drawable.IconCompat, String?, java.util.List<java.lang.String!>);
    method @Deprecated public androidx.slice.Slice.Builder addInt(int, String?, java.lang.String!...);
    method @Deprecated public androidx.slice.Slice.Builder addInt(int, String?, java.util.List<java.lang.String!>);
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public androidx.slice.Slice.Builder addItem(androidx.slice.SliceItem);
    method @Deprecated public androidx.slice.Slice.Builder addLong(long, String?, java.lang.String!...);
    method @Deprecated public androidx.slice.Slice.Builder addLong(long, String?, java.util.List<java.lang.String!>);
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.slice.Slice.Builder addRemoteInput(android.app.RemoteInput, String?, java.lang.String!...);
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.slice.Slice.Builder addRemoteInput(android.app.RemoteInput, String?, java.util.List<java.lang.String!>);
    method @Deprecated public androidx.slice.Slice.Builder addSubSlice(androidx.slice.Slice);
    method @Deprecated public androidx.slice.Slice.Builder addSubSlice(androidx.slice.Slice, String?);
    method @Deprecated public androidx.slice.Slice.Builder addText(CharSequence?, String?, java.lang.String!...);
    method @Deprecated public androidx.slice.Slice.Builder addText(CharSequence?, String?, java.util.List<java.lang.String!>);
    method @Deprecated public androidx.slice.Slice.Builder! addTimestamp(long, String?, java.lang.String!...!);
    method @Deprecated public androidx.slice.Slice.Builder addTimestamp(long, String?, java.util.List<java.lang.String!>);
    method @Deprecated public androidx.slice.Slice build();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.slice.Slice.Builder setSpec(androidx.slice.SliceSpec?);
  }

  @Deprecated @RequiresApi(28) public class SliceConvert {
    method @Deprecated public static android.app.slice.Slice? unwrap(androidx.slice.Slice?);
    method @Deprecated public static androidx.slice.Slice? wrap(android.app.slice.Slice?, android.content.Context);
  }

  @Deprecated @androidx.versionedparcelable.VersionedParcelize(allowSerialization=true, ignoreParcelables=true, isCustom=true) public final class SliceItem extends androidx.versionedparcelable.CustomVersionedParcelable {
    ctor @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public SliceItem();
    ctor @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public SliceItem(android.app.PendingIntent, androidx.slice.Slice?, String, String?, String![]);
    ctor @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public SliceItem(androidx.slice.SliceItem.ActionHandler, androidx.slice.Slice?, String, String?, String![]);
    ctor @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public SliceItem(Object!, String, String?, String![]);
    ctor @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public SliceItem(Object!, String, String?, java.util.List<java.lang.String!>);
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public void addHint(String);
    method @Deprecated public static android.text.ParcelableSpan createSensitiveSpan();
    method @Deprecated public void fireAction(android.content.Context?, android.content.Intent?) throws android.app.PendingIntent.CanceledException;
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public boolean fireActionInternal(android.content.Context?, android.content.Intent?) throws android.app.PendingIntent.CanceledException;
    method @Deprecated public android.app.PendingIntent? getAction();
    method @Deprecated public String getFormat();
    method @Deprecated public java.util.List<java.lang.String!> getHints();
    method @Deprecated public androidx.core.graphics.drawable.IconCompat? getIcon();
    method @Deprecated public int getInt();
    method @Deprecated public long getLong();
    method @Deprecated public CharSequence? getRedactedText();
    method @Deprecated @RequiresApi(20) @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public android.app.RemoteInput? getRemoteInput();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public CharSequence? getSanitizedText();
    method @Deprecated public androidx.slice.Slice? getSlice();
    method @Deprecated public String? getSubType();
    method @Deprecated public CharSequence? getText();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public boolean hasAnyHints(java.lang.String!...?);
    method @Deprecated public boolean hasHint(String);
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static interface SliceItem.ActionHandler {
    method @Deprecated public void onAction(androidx.slice.SliceItem, android.content.Context?, android.content.Intent?);
  }

  @Deprecated public abstract class SliceManager {
    method @Deprecated @androidx.core.content.PermissionChecker.PermissionResult public abstract int checkSlicePermission(android.net.Uri, int, int);
    method @Deprecated public static androidx.slice.SliceManager getInstance(android.content.Context);
    method @Deprecated public abstract java.util.List<android.net.Uri!> getPinnedSlices();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public abstract java.util.Set<androidx.slice.SliceSpec!> getPinnedSpecs(android.net.Uri);
    method @Deprecated public abstract void grantSlicePermission(String, android.net.Uri);
    method @Deprecated public abstract void revokeSlicePermission(String, android.net.Uri);
  }

  @Deprecated public abstract class SliceProvider extends android.content.ContentProvider implements androidx.core.app.CoreComponentFactory.CompatWrapped {
    ctor @Deprecated public SliceProvider();
    ctor @Deprecated public SliceProvider(java.lang.String!...);
    method @Deprecated public final int bulkInsert(android.net.Uri, android.content.ContentValues![]);
    method @Deprecated public final android.net.Uri? canonicalize(android.net.Uri);
    method @Deprecated public final int delete(android.net.Uri, String?, String![]?);
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public static androidx.slice.Clock? getClock();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static java.util.Set<androidx.slice.SliceSpec!>? getCurrentSpecs();
    method @Deprecated public java.util.List<android.net.Uri!> getPinnedSlices();
    method @Deprecated public final String? getType(android.net.Uri);
    method @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY) public Object? getWrapper();
    method @Deprecated public final android.net.Uri? insert(android.net.Uri, android.content.ContentValues?);
    method @Deprecated public abstract androidx.slice.Slice? onBindSlice(android.net.Uri);
    method @Deprecated public final boolean onCreate();
    method @Deprecated public android.app.PendingIntent? onCreatePermissionRequest(android.net.Uri, String);
    method @Deprecated public abstract boolean onCreateSliceProvider();
    method @Deprecated public java.util.Collection<android.net.Uri!> onGetSliceDescendants(android.net.Uri);
    method @Deprecated public android.net.Uri onMapIntentToUri(android.content.Intent);
    method @Deprecated public void onSlicePinned(android.net.Uri);
    method @Deprecated public void onSliceUnpinned(android.net.Uri);
    method @Deprecated @RequiresApi(28) public final android.database.Cursor? query(android.net.Uri, String![]?, android.os.Bundle?, android.os.CancellationSignal?);
    method @Deprecated public final android.database.Cursor? query(android.net.Uri, String![]?, String?, String![]?, String?);
    method @Deprecated public final android.database.Cursor? query(android.net.Uri, String![]?, String?, String![]?, String?, android.os.CancellationSignal?);
    method @Deprecated public final int update(android.net.Uri, android.content.ContentValues?, String?, String![]?);
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) @androidx.versionedparcelable.VersionedParcelize(allowSerialization=true) public final class SliceSpec implements androidx.versionedparcelable.VersionedParcelable {
    ctor @Deprecated public SliceSpec(String, int);
    method @Deprecated public boolean canRender(androidx.slice.SliceSpec);
    method @Deprecated public int getRevision();
    method @Deprecated public String getType();
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SliceSpecs {
    field @Deprecated public static final androidx.slice.SliceSpec! BASIC;
    field @Deprecated public static final androidx.slice.SliceSpec! LIST;
    field @Deprecated public static final androidx.slice.SliceSpec! LIST_V2;
    field @Deprecated public static final androidx.slice.SliceSpec! MESSAGING;
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SystemClock implements androidx.slice.Clock {
    ctor @Deprecated public SystemClock();
    method @Deprecated public long currentTimeMillis();
  }

}

package androidx.slice.compat {

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class CompatPermissionManager {
    ctor @Deprecated public CompatPermissionManager(android.content.Context, String, int, String![]);
    method @Deprecated public int checkSlicePermission(android.net.Uri, int, int);
    method @Deprecated public void grantSlicePermission(android.net.Uri, String);
    method @Deprecated public void revokeSlicePermission(android.net.Uri, String);
    field @Deprecated public static final String ALL_SUFFIX = "_all";
  }

  @Deprecated public static class CompatPermissionManager.PermissionState {
    method @Deprecated public String getKey();
    method @Deprecated public boolean hasAccess(java.util.List<java.lang.String!>);
    method @Deprecated public boolean hasAllPermissions();
    method @Deprecated public java.util.Set<java.lang.String!> toPersistable();
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public class SliceProviderCompat {
    ctor @Deprecated public SliceProviderCompat(androidx.slice.SliceProvider, androidx.slice.compat.CompatPermissionManager, android.content.Context);
    method @Deprecated public static void addSpecs(android.os.Bundle, java.util.Set<androidx.slice.SliceSpec!>);
    method @Deprecated public static androidx.slice.Slice? bindSlice(android.content.Context, android.content.Intent, java.util.Set<androidx.slice.SliceSpec!>);
    method @Deprecated public static androidx.slice.Slice? bindSlice(android.content.Context, android.net.Uri, java.util.Set<androidx.slice.SliceSpec!>);
    method @Deprecated public android.os.Bundle? call(String, String?, android.os.Bundle);
    method @Deprecated public static int checkSlicePermission(android.content.Context, String?, android.net.Uri, int, int);
    method @Deprecated public String? getCallingPackage();
    method @Deprecated public static java.util.List<android.net.Uri!> getPinnedSlices(android.content.Context);
    method @Deprecated public static java.util.Set<androidx.slice.SliceSpec!>? getPinnedSpecs(android.content.Context, android.net.Uri);
    method @Deprecated public static java.util.Collection<android.net.Uri!> getSliceDescendants(android.content.Context, android.net.Uri);
    method @Deprecated public static java.util.Set<androidx.slice.SliceSpec!> getSpecs(android.os.Bundle);
    method @Deprecated public static void grantSlicePermission(android.content.Context, String?, String?, android.net.Uri);
    method @Deprecated public static android.net.Uri? mapIntentToUri(android.content.Context, android.content.Intent);
    method @Deprecated public static void pinSlice(android.content.Context, android.net.Uri, java.util.Set<androidx.slice.SliceSpec!>);
    method @Deprecated public static void revokeSlicePermission(android.content.Context, String?, String?, android.net.Uri);
    method @Deprecated public static void unpinSlice(android.content.Context, android.net.Uri, java.util.Set<androidx.slice.SliceSpec!>);
    field @Deprecated public static final String ARG_SUPPORTS_VERSIONED_PARCELABLE = "supports_versioned_parcelable";
    field @Deprecated public static final String EXTRA_BIND_URI = "slice_uri";
    field @Deprecated public static final String EXTRA_INTENT = "slice_intent";
    field @Deprecated public static final String EXTRA_PID = "pid";
    field @Deprecated public static final String EXTRA_PKG = "pkg";
    field @Deprecated public static final String EXTRA_PROVIDER_PKG = "provider_pkg";
    field @Deprecated public static final String EXTRA_RESULT = "result";
    field @Deprecated public static final String EXTRA_SLICE = "slice";
    field @Deprecated public static final String EXTRA_SLICE_DESCENDANTS = "slice_descendants";
    field @Deprecated public static final String EXTRA_SUPPORTED_SPECS = "specs";
    field @Deprecated public static final String EXTRA_SUPPORTED_SPECS_REVS = "revs";
    field @Deprecated public static final String EXTRA_UID = "uid";
    field @Deprecated public static final String METHOD_CHECK_PERMISSION = "check_perms";
    field @Deprecated public static final String METHOD_GET_DESCENDANTS = "get_descendants";
    field @Deprecated public static final String METHOD_GET_PINNED_SPECS = "get_specs";
    field @Deprecated public static final String METHOD_GRANT_PERMISSION = "grant_perms";
    field @Deprecated public static final String METHOD_MAP_INTENT = "map_slice";
    field @Deprecated public static final String METHOD_MAP_ONLY_INTENT = "map_only";
    field @Deprecated public static final String METHOD_PIN = "pin_slice";
    field @Deprecated public static final String METHOD_REVOKE_PERMISSION = "revoke_perms";
    field @Deprecated public static final String METHOD_SLICE = "bind_slice";
    field @Deprecated public static final String METHOD_UNPIN = "unpin_slice";
    field @Deprecated public static final String PERMS_PREFIX = "slice_perms_";
  }

}

package androidx.slice.core {

  @Deprecated public interface SliceAction {
    method @Deprecated public android.app.PendingIntent getAction();
    method @Deprecated public CharSequence? getContentDescription();
    method @Deprecated public androidx.core.graphics.drawable.IconCompat? getIcon();
    method @Deprecated @androidx.slice.core.SliceHints.ImageMode public int getImageMode();
    method @Deprecated public String? getKey();
    method @Deprecated public int getPriority();
    method @Deprecated public CharSequence getTitle();
    method @Deprecated public boolean isActivity();
    method @Deprecated public boolean isChecked();
    method @Deprecated public boolean isDefaultToggle();
    method @Deprecated public boolean isToggle();
    method @Deprecated public androidx.slice.core.SliceAction setChecked(boolean);
    method @Deprecated public androidx.slice.core.SliceAction setContentDescription(CharSequence);
    method @Deprecated public androidx.slice.core.SliceAction setKey(String);
    method @Deprecated public androidx.slice.core.SliceAction setPriority(@IntRange(from=0) int);
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SliceActionImpl implements androidx.slice.core.SliceAction {
    ctor @Deprecated public SliceActionImpl(android.app.PendingIntent, androidx.core.graphics.drawable.IconCompat, @androidx.slice.core.SliceHints.ImageMode int, CharSequence);
    ctor @Deprecated public SliceActionImpl(android.app.PendingIntent, androidx.core.graphics.drawable.IconCompat, CharSequence);
    ctor @Deprecated public SliceActionImpl(android.app.PendingIntent, androidx.core.graphics.drawable.IconCompat, CharSequence, boolean);
    ctor @Deprecated public SliceActionImpl(android.app.PendingIntent, CharSequence, boolean);
    ctor @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP) public SliceActionImpl(androidx.slice.SliceItem);
    method @Deprecated public androidx.slice.Slice buildPrimaryActionSlice(androidx.slice.Slice.Builder);
    method @Deprecated public androidx.slice.Slice buildSlice(androidx.slice.Slice.Builder);
    method @Deprecated public android.app.PendingIntent getAction();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public androidx.slice.SliceItem? getActionItem();
    method @Deprecated public CharSequence? getContentDescription();
    method @Deprecated public androidx.core.graphics.drawable.IconCompat? getIcon();
    method @Deprecated @androidx.slice.core.SliceHints.ImageMode public int getImageMode();
    method @Deprecated public String? getKey();
    method @Deprecated public int getPriority();
    method @Deprecated public androidx.slice.SliceItem? getSliceItem();
    method @Deprecated public String? getSubtype();
    method @Deprecated public CharSequence getTitle();
    method @Deprecated public boolean isActivity();
    method @Deprecated public boolean isChecked();
    method @Deprecated public boolean isDefaultToggle();
    method @Deprecated public boolean isToggle();
    method @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public static int parseImageMode(androidx.slice.SliceItem);
    method @Deprecated public void setActivity(boolean);
    method @Deprecated public androidx.slice.core.SliceActionImpl setChecked(boolean);
    method @Deprecated public androidx.slice.core.SliceAction? setContentDescription(CharSequence);
    method @Deprecated public androidx.slice.core.SliceActionImpl setKey(String);
    method @Deprecated public androidx.slice.core.SliceActionImpl setPriority(@IntRange(from=0) int);
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SliceHints {
    field @Deprecated public static final int ACTION_WITH_LABEL = 6; // 0x6
    field @Deprecated public static final int DETERMINATE_RANGE = 0; // 0x0
    field @Deprecated public static final String HINT_ACTIVITY = "activity";
    field @Deprecated public static final String HINT_CACHED = "cached";
    field @Deprecated public static final String HINT_END_OF_SECTION = "end_of_section";
    field @Deprecated public static final String HINT_OVERLAY = "overlay";
    field @Deprecated public static final String HINT_RAW = "raw";
    field @Deprecated public static final String HINT_SELECTION_OPTION = "selection_option";
    field @Deprecated public static final String HINT_SHOW_LABEL = "show_label";
    field @Deprecated public static final int ICON_IMAGE = 0; // 0x0
    field @Deprecated public static final int INDETERMINATE_RANGE = 1; // 0x1
    field @Deprecated public static final long INFINITY = -1L; // 0xffffffffffffffffL
    field @Deprecated public static final int LARGE_IMAGE = 2; // 0x2
    field @Deprecated public static final int RAW_IMAGE_LARGE = 4; // 0x4
    field @Deprecated public static final int RAW_IMAGE_SMALL = 3; // 0x3
    field @Deprecated public static final String SLICE_METADATA_KEY = "android.metadata.SLICE_URI";
    field @Deprecated public static final int SMALL_IMAGE = 1; // 0x1
    field @Deprecated public static final int STAR_RATING = 2; // 0x2
    field @Deprecated public static final String SUBTYPE_ACTION_KEY = "action_key";
    field @Deprecated public static final String SUBTYPE_DATE_PICKER = "date_picker";
    field @Deprecated public static final String SUBTYPE_HOST_EXTRAS = "host_extras";
    field @Deprecated public static final String SUBTYPE_MILLIS = "millis";
    field @Deprecated public static final String SUBTYPE_MIN = "min";
    field @Deprecated public static final String SUBTYPE_SELECTION = "selection";
    field @Deprecated public static final String SUBTYPE_SELECTION_OPTION_KEY = "selection_option_key";
    field @Deprecated public static final String SUBTYPE_SELECTION_OPTION_VALUE = "selection_option_value";
    field @Deprecated public static final String SUBTYPE_TIME_PICKER = "time_picker";
    field @Deprecated public static final int UNKNOWN_IMAGE = 5; // 0x5
  }

  @Deprecated @IntDef({androidx.slice.core.SliceHints.LARGE_IMAGE, androidx.slice.core.SliceHints.SMALL_IMAGE, androidx.slice.core.SliceHints.ICON_IMAGE, androidx.slice.core.SliceHints.RAW_IMAGE_SMALL, androidx.slice.core.SliceHints.RAW_IMAGE_LARGE, androidx.slice.core.SliceHints.UNKNOWN_IMAGE, androidx.slice.core.SliceHints.ACTION_WITH_LABEL}) @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE) public static @interface SliceHints.ImageMode {
  }

  @Deprecated @RestrictTo(androidx.annotation.RestrictTo.Scope.LIBRARY_GROUP_PREFIX) public class SliceQuery {
    method @Deprecated public static androidx.slice.SliceItem? find(androidx.slice.Slice?, String?);
    method @Deprecated public static androidx.slice.SliceItem? find(androidx.slice.Slice?, String?, String?, String?);
    method @Deprecated public static androidx.slice.SliceItem? find(androidx.slice.Slice?, String?, String![]?, String![]?);
    method @Deprecated public static androidx.slice.SliceItem? find(androidx.slice.SliceItem?, String?);
    method @Deprecated public static androidx.slice.SliceItem? find(androidx.slice.SliceItem?, String?, String?, String?);
    method @Deprecated public static androidx.slice.SliceItem? find(androidx.slice.SliceItem?, String?, String![]?, String![]?);
    method @Deprecated public static java.util.List<androidx.slice.SliceItem!> findAll(androidx.slice.Slice, String?, String?, String?);
    method @Deprecated public static java.util.List<androidx.slice.SliceItem!> findAll(androidx.slice.Slice, String?, String![]?, String![]?);
    method @Deprecated public static java.util.List<androidx.slice.SliceItem!> findAll(androidx.slice.SliceItem, String?);
    method @Deprecated public static java.util.List<androidx.slice.SliceItem!> findAll(androidx.slice.SliceItem, String?, String?, String?);
    method @Deprecated public static java.util.List<androidx.slice.SliceItem!> findAll(androidx.slice.SliceItem, String?, String![]?, String![]?);
    method @Deprecated public static androidx.slice.SliceItem? findItem(androidx.slice.Slice, android.net.Uri);
    method @Deprecated public static androidx.slice.SliceItem? findNotContaining(androidx.slice.SliceItem?, java.util.List<androidx.slice.SliceItem!>);
    method @Deprecated public static androidx.slice.SliceItem? findSubtype(androidx.slice.Slice?, String?, String?);
    method @Deprecated public static androidx.slice.SliceItem? findSubtype(androidx.slice.SliceItem?, String?, String?);
    method @Deprecated public static androidx.slice.SliceItem? findTopLevelItem(androidx.slice.Slice, String?, String?, String![]?, String![]?);
    method @Deprecated public static boolean hasAnyHints(androidx.slice.SliceItem, java.lang.String!...?);
    method @Deprecated public static boolean hasHints(androidx.slice.Slice, java.lang.String!...?);
    method @Deprecated public static boolean hasHints(androidx.slice.SliceItem, java.lang.String!...?);
  }

}

