/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */
import androidx.build.LibraryType
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("AndroidXPlugin")
    id("kotlin")
    id("com.github.johnrengelman.shadow")
}

configurations {
    // For shadowed / jarjared deps
    shadowed
    // shadowed deps are compile only deps
    compileOnly.extendsFrom(shadowed)
    // compiler tests don't use shadowed, so include them
    testCompile.extendsFrom(shadowed)
    // for downstream tests
    shadowAndImplementation.extendsFrom(shadow)
    shadowAndImplementation.extendsFrom(implementation)
}

shadowJar {
    archiveClassifier = ""
    configurations = [project.configurations.shadowed]
    relocate("kotlinx.metadata", "androidx.room.jarjarred.kotlinx.metadata")
    mergeServiceFiles() // kotlinx-metadata-jvm has a service descriptor that needs transformation
    // Exclude Kotlin metadata files from kotlinx-metadata-jvm
    exclude 'META-INF/kotlinx-metadata-jvm.kotlin_module'
    exclude 'META-INF/kotlinx-metadata.kotlin_module'
    exclude 'META-INF/metadata.jvm.kotlin_module'
    exclude 'META-INF/metadata.kotlin_module'
}

jar {
    archiveClassifier = "before-jarjar"
}

configurations {
    // replace the standard jar with the one built by 'shadowJar' in both api and runtime variants
    apiElements.outgoing.artifacts.clear()
    apiElements.outgoing.artifact(shadowJar) {
        builtBy shadowJar
    }
    runtimeElements.outgoing.artifacts.clear()
    runtimeElements.outgoing.artifact(shadowJar) {
        builtBy shadowJar
    }
}

dependencies {
    api(libs.kotlinStdlib)
    api(libs.javapoet)
    api(libs.kotlinPoet)
    api(libs.kotlinPoetJavaPoet)
    implementation(libs.guava)
    implementation(libs.autoCommon)
    implementation(libs.autoValueAnnotations)
    shadowed(libs.kotlinMetadataJvm) {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-stdlib"
    }
    implementation(libs.intellijAnnotations)
    implementation(libs.kspApi)
    implementation(libs.kotlinStdlibJdk8) // KSP defines older version as dependency, force update.

    testImplementation("androidx.annotation:annotation:1.1.0")
    testImplementation(libs.googleCompileTesting)
    testImplementation(libs.junit)
    testImplementation(libs.jsr250)
    testImplementation(libs.ksp)
    testImplementation(libs.kotlinMetadataJvm)
    testImplementation(libs.testParameterInjector)
    testImplementation(project(":room:room-compiler-processing-testing"))
    testImplementation(project(":internal-testutils-common"))
    testImplementation(project(":kruth:kruth"))
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += [
                "-opt-in=kotlin.contracts.ExperimentalContracts",
                "-opt-in=androidx.room.compiler.processing.ExperimentalProcessingApi",
                "-opt-in=com.squareup.kotlinpoet.javapoet.KotlinPoetJavaPoetPreview"
        ]
    }
}

tasks.withType(Test).configureEach { test ->
    test.maxParallelForks(2)
    test.systemProperty("androidx.room.compiler.processing.strict", "true")
}

androidx {
    name = "Room XProcessor"
    type = LibraryType.ANNOTATION_PROCESSOR_UTILS
    inceptionYear = "2020"
    description = "Processing Environment Abstraction for AndroidX Room"
}
