// Dimensions for layout elements.
syntax = "proto3";

package androidx.wear.protolayout.proto;

import "alignment.proto";
import "dynamic.proto";
import "types.proto";

option java_package = "androidx.wear.protolayout.proto";
option java_outer_classname = "DimensionProto";

// A type for linear dimensions, measured in dp.
message DpProp {

  oneof optional_value {
    // The static value, in dp. If a dynamic value is also set and the renderer supports
    // dynamic values for the corresponding field, this static value will be
    // ignored. If the static value is not specified, zero will be used instead.
    float value = 1;
  }

  // The dynamic value, in dp. Note that when setting this value, the static value is
  // still required to be set to support older renderers that only read the
  // static value. If {@code dynamicValue} has an invalid result, the provided
  // static value will be used instead.
  androidx.wear.protolayout.expression.proto.DynamicFloat dynamic_value = 2;

  oneof optional_value_for_layout {
    float value_for_layout = 3;
  }

  oneof align {
    // Vertical alignment of the actual content within the space reserved by
    // value_for_layout. Only valid when this DpProp is used for vertical
    // sizing. If not specified, defaults to center alignment.
    VerticalAlignment vertical_alignment_for_layout = 4;

    // Horizontal alignment of the actual content within the space reserved by
    // value_for_layout. Only valid when this DpProp is used for horizontal
    // sizing. If not specified, defaults to center alignment.
    HorizontalAlignment horizontal_alignment_for_layout = 5;
  }
}

// A type for font sizes, measured in sp.
message SpProp {
  // The value, in sp.
  float value = 2;

  reserved 1;
}

// A type for font spacing, measured in em.
message EmProp {
  // The value, in em.
  float value = 1;
}

// The length of an ArcLine.
message ArcLineLength {
  oneof inner {
    DegreesProp degrees = 1;
    ExpandedAngularDimensionProp expanded_angular_dimension = 2;
  }
}

// The length of an ArcSpacer.
message ArcSpacerLength {
  oneof inner {
    DegreesProp degrees = 1;
    ExpandedAngularDimensionProp expanded_angular_dimension = 2;
  }
}

// A type for an angular dimension that fills all the space it can
// (i.e. MATCH_PARENT in Android parlance)
message ExpandedAngularDimensionProp {
  // The layout weight (a dimensionless scalar value) for this element. The
  // angular dimension for this element will be layout_weight times the
  // available space divided by the sum of the layout_weights. If not set this
  // defaults to 1.
  FloatProp layout_weight = 1;
}

// A type for angular dimensions, measured in degrees.
message DegreesProp {

  oneof optional_value {
    // The static value, in degrees. If a dynamic value is also set and the renderer
    // supports dynamic values for the corresponding field, this static value will be
    // ignored. If the static value is not specified, zero will be used instead.
    float value = 1;
  }

  // The dynamic value, in degrees. Note that when setting this value, the static value is
  // still required to be set to support older renderers that only read the
  // static value. If {@code dynamicValue} has an invalid result, the provided
  // static value will be used instead.
  androidx.wear.protolayout.expression.proto.DynamicFloat dynamic_value = 2;

  oneof optional_value_for_layout {
    float value_for_layout = 3;
  }
  AngularAlignment angular_alignment_for_layout = 4;
}

// A type for a dimension that fills all the space it can (i.e. MATCH_PARENT in
// Android parlance)
message ExpandedDimensionProp {
  // The layout weight (a dimensionless scalar value) for this element. This
  // will only affect the width of children of a Row or the height of children
  // of a Column. By default, all children have equal weight. Where applicable,
  // the width or height of the element is proportional to the sum of the
  // weights of its siblings.
  FloatProp layout_weight = 1;
}

// A type for a dimension that sizes itself to the size of its children (i.e.
// WRAP_CONTENT in Android parlance)
message WrappedDimensionProp {
  // The minimum size of this dimension. If not set, then there is no minimum
  // size.
  DpProp minimum_size = 1;
}

// A type for a dimension that scales itself proportionally to another dimension
// such that the aspect ratio defined by the given width and height values is
// preserved.
//
// Note that the width and height are unitless; only their ratio is relevant.
// This allows for specifying an element's size using common ratios (e.g.
// width=4, height=3), or to allow an element to be resized proportionally based
// on the size of an underlying asset (e.g. an 800x600 image being added to a
// smaller container and resized accordingly).
message ProportionalDimensionProp {
  // The width to be used when calculating the aspect ratio to preserve.
  uint32 aspect_ratio_width = 1;

  // The height to be used when calculating the aspect ratio ratio to preserve.
  uint32 aspect_ratio_height = 2;
}

// A dimension that can be applied to a container.
message ContainerDimension {
  oneof inner {
    DpProp linear_dimension = 1;
    ExpandedDimensionProp expanded_dimension = 2;
    WrappedDimensionProp wrapped_dimension = 3;
  }
}

// A dimension that can be applied to an image.
message ImageDimension {
  oneof inner {
    DpProp linear_dimension = 1;
    ExpandedDimensionProp expanded_dimension = 2;
    ProportionalDimensionProp proportional_dimension = 3;
  }
}

// A dimension that can be applied to a spacer.
message SpacerDimension {
  oneof inner {
    DpProp linear_dimension = 1;
    ExpandedDimensionProp expanded_dimension = 2;
  }
}

// A dimension that can be applied to a ExtensionLayoutElement element.
message ExtensionDimension {
  oneof inner {
    DpProp linear_dimension = 1;
  }
}
