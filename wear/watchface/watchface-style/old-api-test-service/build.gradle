/*
 * Copyright 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was created using the `create_project.py` script located in the
 * `<AndroidX root>/development/project-creator` directory.
 *
 * Please use that script when creating a new project, rather than copying an existing project and
 * modifying its settings.
 */
import androidx.build.LibraryType
import com.android.build.api.artifact.SingleArtifact

plugins {
    id("AndroidXPlugin")
    id("com.android.application")
    id("kotlin-android")
}

dependencies {
    compileOnly(project(":annotation:annotation-sampled"))

    api(project(":wear:watchface:watchface-style-old-api-test-stub"))

    implementation("androidx.core:core:1.1.0")
    implementation("androidx.wear.watchface:watchface-style:1.0.0")
    implementation("androidx.wear.watchface:watchface-data:1.0.0")
    api(libs.kotlinStdlib)
}

androidx {
    name = "WatchFace Style Old Api Test Service"
    type = LibraryType.SAMPLES
    inceptionYear = "2022"
    description = "Test service built with v1.0.0 of the API, used to check for binary AIDL compat"
}

android {
    defaultConfig {
        minSdkVersion 26
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt')
        }
    }
    buildFeatures {
        aidl = true
    }
    namespace "androidx.wear.watchface.style.test.oldApiTestService"
}

/*
 * Allow integration tests to consume the APK produced by this project
 */
configurations {
    apkAssets {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(
                    LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE,
                    objects.named(LibraryElements, 'apkAssets')
            )
        }
    }
}

androidComponents {
    onVariants(selector().all().withBuildType("release"), { variant ->
        artifacts {
            apkAssets(variant.artifacts.get(SingleArtifact.APK.INSTANCE))
        }
    })
}