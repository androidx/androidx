// Signature format: 4.0
package androidx.graphics {

  @RequiresApi(android.os.Build.VERSION_CODES.Q) public final class CanvasBufferedRenderer implements java.lang.AutoCloseable {
    method public void close();
    method public int getBufferFormat();
    method public int getMaxBuffers();
    method public long getUsageFlags();
    method public boolean isClosed();
    method public androidx.graphics.CanvasBufferedRenderer.RenderRequest obtainRenderRequest();
    method public void releaseBuffer(android.hardware.HardwareBuffer hardwareBuffer);
    method public void releaseBuffer(android.hardware.HardwareBuffer hardwareBuffer, optional androidx.hardware.SyncFenceCompat? fence);
    method public void setContentRoot(android.graphics.RenderNode renderNode);
    method public void setLightSourceAlpha(float ambientShadowAlpha, float spotShadowAlpha);
    method public void setLightSourceGeometry(float lightX, float lightY, float lightZ, float lightRadius);
    property public final int bufferFormat;
    property public final boolean isClosed;
    property public final int maxBuffers;
    property public final long usageFlags;
  }

  public static final class CanvasBufferedRenderer.Builder {
    ctor public CanvasBufferedRenderer.Builder(int width, int height);
    method public androidx.graphics.CanvasBufferedRenderer build();
    method public androidx.graphics.CanvasBufferedRenderer.Builder setBufferFormat(int format);
    method public androidx.graphics.CanvasBufferedRenderer.Builder setMaxBuffers(@IntRange(from=1L, to=64L) int numBuffers);
    method public androidx.graphics.CanvasBufferedRenderer.Builder setUsageFlags(long usageFlags);
  }

  public final class CanvasBufferedRenderer.RenderRequest {
    method public suspend Object? draw(optional boolean waitForFence, kotlin.coroutines.Continuation<? super androidx.graphics.CanvasBufferedRenderer.RenderResult>);
    method public void drawAsync(java.util.concurrent.Executor executor, androidx.core.util.Consumer<androidx.graphics.CanvasBufferedRenderer.RenderResult> callback);
    method public androidx.graphics.CanvasBufferedRenderer.RenderRequest preserveContents(boolean preserve);
    method public androidx.graphics.CanvasBufferedRenderer.RenderRequest setBufferTransform(int bufferTransform);
    method public androidx.graphics.CanvasBufferedRenderer.RenderRequest setColorSpace(android.graphics.ColorSpace? colorSpace);
  }

  public static final class CanvasBufferedRenderer.RenderResult {
    ctor public CanvasBufferedRenderer.RenderResult(android.hardware.HardwareBuffer buffer, androidx.hardware.SyncFenceCompat? mFence, int mStatus);
    method public androidx.hardware.SyncFenceCompat? getFence();
    method public android.hardware.HardwareBuffer getHardwareBuffer();
    method public int getStatus();
    property public final androidx.hardware.SyncFenceCompat? fence;
    property public final android.hardware.HardwareBuffer hardwareBuffer;
    property public final int status;
    field public static final androidx.graphics.CanvasBufferedRenderer.RenderResult.Companion Companion;
    field public static final int ERROR_UNKNOWN = 1; // 0x1
    field public static final int SUCCESS = 0; // 0x0
  }

  public static final class CanvasBufferedRenderer.RenderResult.Companion {
  }

}

package androidx.graphics.lowlatency {

  public final class BufferInfo {
    method public int getFrameBufferId();
    method public int getHeight();
    method public int getWidth();
    property public final int frameBufferId;
    property public final int height;
    property public final int width;
  }

  @RequiresApi(android.os.Build.VERSION_CODES.Q) public final class CanvasFrontBufferedRenderer<T> {
    ctor public CanvasFrontBufferedRenderer(android.view.SurfaceView surfaceView, androidx.graphics.lowlatency.CanvasFrontBufferedRenderer.Callback<T> callback);
    ctor public CanvasFrontBufferedRenderer(android.view.SurfaceView surfaceView, androidx.graphics.lowlatency.CanvasFrontBufferedRenderer.Callback<T> callback, optional int bufferFormat);
    method public void cancel();
    method public void clear();
    method public void commit();
    method public int getBufferFormat();
    method public android.graphics.ColorSpace getColorSpace();
    method public boolean isValid();
    method public void release(boolean cancelPending);
    method public void release(boolean cancelPending, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onReleaseComplete);
    method public void renderFrontBufferedLayer(T param);
    method public void renderMultiBufferedLayer(java.util.Collection<? extends T> params);
    method public void setColorSpace(android.graphics.ColorSpace);
    property public final int bufferFormat;
    property public final android.graphics.ColorSpace colorSpace;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public static interface CanvasFrontBufferedRenderer.Callback<T> {
    method @WorkerThread public void onDrawFrontBufferedLayer(android.graphics.Canvas canvas, int bufferWidth, int bufferHeight, T param);
    method @WorkerThread public void onDrawMultiBufferedLayer(android.graphics.Canvas canvas, int bufferWidth, int bufferHeight, java.util.Collection<? extends T> params);
    method @WorkerThread public default void onFrontBufferedLayerRenderComplete(androidx.graphics.surface.SurfaceControlCompat frontBufferedLayerSurfaceControl, androidx.graphics.surface.SurfaceControlCompat.Transaction transaction);
    method @WorkerThread public default void onMultiBufferedLayerRenderComplete(androidx.graphics.surface.SurfaceControlCompat frontBufferedLayerSurfaceControl, androidx.graphics.surface.SurfaceControlCompat multiBufferedLayerSurfaceControl, androidx.graphics.surface.SurfaceControlCompat.Transaction transaction);
  }

  public final class FrontBufferSyncStrategy implements androidx.graphics.opengl.SyncStrategy {
    ctor public FrontBufferSyncStrategy(long usageFlags);
    method public androidx.hardware.SyncFenceCompat? createSyncFence(androidx.graphics.opengl.egl.EGLSpec eglSpec);
    method public boolean isVisible();
    method public void setVisible(boolean);
    property public final boolean isVisible;
  }

  @RequiresApi(android.os.Build.VERSION_CODES.Q) public final class GLFrontBufferedRenderer<T> {
    ctor public GLFrontBufferedRenderer(android.view.SurfaceView surfaceView, androidx.graphics.lowlatency.GLFrontBufferedRenderer.Callback<T> callback);
    ctor public GLFrontBufferedRenderer(android.view.SurfaceView surfaceView, androidx.graphics.lowlatency.GLFrontBufferedRenderer.Callback<T> callback, optional androidx.graphics.opengl.GLRenderer? glRenderer);
    ctor public GLFrontBufferedRenderer(android.view.SurfaceView surfaceView, androidx.graphics.lowlatency.GLFrontBufferedRenderer.Callback<T> callback, optional androidx.graphics.opengl.GLRenderer? glRenderer, optional int bufferFormat);
    method public void cancel();
    method public void clear();
    method public void commit();
    method public void execute(Runnable runnable);
    method public int getBufferFormat();
    method public boolean isValid();
    method public void release(boolean cancelPending);
    method public void release(boolean cancelPending, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onReleaseComplete);
    method public void renderFrontBufferedLayer(T param);
    method public void renderMultiBufferedLayer(java.util.Collection<? extends T> params);
    property public final int bufferFormat;
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public static interface GLFrontBufferedRenderer.Callback<T> {
    method @WorkerThread public void onDrawFrontBufferedLayer(androidx.graphics.opengl.egl.EGLManager eglManager, int width, int height, androidx.graphics.lowlatency.BufferInfo bufferInfo, float[] transform, T param);
    method @WorkerThread public void onDrawMultiBufferedLayer(androidx.graphics.opengl.egl.EGLManager eglManager, int width, int height, androidx.graphics.lowlatency.BufferInfo bufferInfo, float[] transform, java.util.Collection<? extends T> params);
    method @WorkerThread public default void onFrontBufferedLayerRenderComplete(androidx.graphics.surface.SurfaceControlCompat frontBufferedLayerSurfaceControl, androidx.graphics.surface.SurfaceControlCompat.Transaction transaction);
    method @WorkerThread public default void onMultiBufferedLayerRenderComplete(androidx.graphics.surface.SurfaceControlCompat frontBufferedLayerSurfaceControl, androidx.graphics.surface.SurfaceControlCompat multiBufferedLayerSurfaceControl, androidx.graphics.surface.SurfaceControlCompat.Transaction transaction);
  }

  @RequiresApi(android.os.Build.VERSION_CODES.Q) public final class LowLatencyCanvasView extends android.view.ViewGroup {
    ctor public LowLatencyCanvasView(android.content.Context context);
    ctor public LowLatencyCanvasView(android.content.Context context, optional android.util.AttributeSet? attrs);
    ctor public LowLatencyCanvasView(android.content.Context context, optional android.util.AttributeSet? attrs, optional int defStyle);
    method public void cancel();
    method public void clear();
    method public void commit();
    method public void execute(Runnable runnable);
    method public void renderFrontBufferedLayer();
    method public void setRenderCallback(androidx.graphics.lowlatency.LowLatencyCanvasView.Callback? callback);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public static interface LowLatencyCanvasView.Callback {
    method @WorkerThread public void onDrawFrontBufferedLayer(android.graphics.Canvas canvas, int width, int height);
    method @WorkerThread public default void onFrontBufferedLayerRenderComplete(androidx.graphics.surface.SurfaceControlCompat frontBufferedLayerSurfaceControl, androidx.graphics.surface.SurfaceControlCompat.Transaction transaction);
    method @WorkerThread public void onRedrawRequested(android.graphics.Canvas canvas, int width, int height);
  }

}

package androidx.graphics.opengl {

  @RequiresApi(android.os.Build.VERSION_CODES.O) public final class FrameBuffer implements java.lang.AutoCloseable {
    ctor public FrameBuffer(androidx.graphics.opengl.egl.EGLSpec egl, android.hardware.HardwareBuffer hardwareBuffer);
    method public void close();
    method public android.hardware.HardwareBuffer getHardwareBuffer();
    method public boolean isClosed();
    method public void makeCurrent();
    property public final android.hardware.HardwareBuffer hardwareBuffer;
    property public final boolean isClosed;
  }

  @RequiresApi(android.os.Build.VERSION_CODES.O) public final class FrameBufferRenderer implements androidx.graphics.opengl.GLRenderer.RenderCallback {
    ctor public FrameBufferRenderer(androidx.graphics.opengl.FrameBufferRenderer.RenderCallback frameBufferRendererCallbacks, optional androidx.graphics.opengl.SyncStrategy syncStrategy);
    method public void clear();
    method public void onDrawFrame(androidx.graphics.opengl.egl.EGLManager eglManager);
  }

  public static interface FrameBufferRenderer.RenderCallback {
    method public androidx.graphics.opengl.FrameBuffer obtainFrameBuffer(androidx.graphics.opengl.egl.EGLSpec egl);
    method public void onDraw(androidx.graphics.opengl.egl.EGLManager eglManager);
    method public void onDrawComplete(androidx.graphics.opengl.FrameBuffer frameBuffer, androidx.hardware.SyncFenceCompat? syncFenceCompat);
  }

  @RequiresApi(android.os.Build.VERSION_CODES.Q) public final class GLFrameBufferRenderer {
    method public void execute(Runnable runnable);
    method public int getBufferFormat();
    method public androidx.graphics.opengl.GLRenderer getGLRenderer();
    method public int getMaxBuffers();
    method public androidx.graphics.opengl.SyncStrategy getSyncStrategy();
    method public long getUsageFlags();
    method public boolean isValid();
    method public void release(boolean cancelPending);
    method public void release(boolean cancelPending, optional kotlin.jvm.functions.Function0<kotlin.Unit>? onReleaseCallback);
    method public void render();
    property public final int bufferFormat;
    property public final androidx.graphics.opengl.GLRenderer glRenderer;
    property public final int maxBuffers;
    property public final androidx.graphics.opengl.SyncStrategy syncStrategy;
    property public final long usageFlags;
  }

  public static final class GLFrameBufferRenderer.Builder {
    ctor public GLFrameBufferRenderer.Builder(android.view.SurfaceView surfaceView, androidx.graphics.opengl.GLFrameBufferRenderer.Callback callback);
    method public androidx.graphics.opengl.GLFrameBufferRenderer build();
    method public androidx.graphics.opengl.GLFrameBufferRenderer.Builder setBufferFormat(int format);
    method public androidx.graphics.opengl.GLFrameBufferRenderer.Builder setGLRenderer(androidx.graphics.opengl.GLRenderer? glRenderer);
    method public androidx.graphics.opengl.GLFrameBufferRenderer.Builder setMaxBuffers(@IntRange(from=1L, to=64L) int numBuffers);
    method public androidx.graphics.opengl.GLFrameBufferRenderer.Builder setSyncStrategy(androidx.graphics.opengl.SyncStrategy syncStrategy);
    method public androidx.graphics.opengl.GLFrameBufferRenderer.Builder setUsageFlags(long usageFlags);
  }

  public static interface GLFrameBufferRenderer.Callback {
    method @WorkerThread public default void onBufferReleased(androidx.graphics.opengl.FrameBuffer frameBuffer, androidx.hardware.SyncFenceCompat? releaseFence);
    method @WorkerThread public default void onDrawComplete(androidx.graphics.surface.SurfaceControlCompat targetSurfaceControl, androidx.graphics.surface.SurfaceControlCompat.Transaction transaction, androidx.graphics.opengl.FrameBuffer frameBuffer, androidx.hardware.SyncFenceCompat? syncFence);
    method @WorkerThread public void onDrawFrame(androidx.graphics.opengl.egl.EGLManager eglManager, int width, int height, androidx.graphics.lowlatency.BufferInfo bufferInfo, float[] transform);
  }

  public final class GLRenderer {
    ctor public GLRenderer(optional kotlin.jvm.functions.Function0<? extends androidx.graphics.opengl.egl.EGLSpec> eglSpecFactory, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.egl.EGLManager,? extends android.opengl.EGLConfig> eglConfigFactory);
    method public androidx.graphics.opengl.GLRenderer.RenderTarget attach(android.view.Surface surface, int width, int height, androidx.graphics.opengl.GLRenderer.RenderCallback renderer);
    method public androidx.graphics.opengl.GLRenderer.RenderTarget attach(android.view.SurfaceView surfaceView, androidx.graphics.opengl.GLRenderer.RenderCallback renderer);
    method public androidx.graphics.opengl.GLRenderer.RenderTarget attach(android.view.TextureView textureView, androidx.graphics.opengl.GLRenderer.RenderCallback renderer);
    method public androidx.graphics.opengl.GLRenderer.RenderTarget createRenderTarget(int width, int height, androidx.graphics.opengl.GLRenderer.RenderCallback renderer);
    method public void detach(androidx.graphics.opengl.GLRenderer.RenderTarget target, boolean cancelPending);
    method public void detach(androidx.graphics.opengl.GLRenderer.RenderTarget target, boolean cancelPending, optional @WorkerThread kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onDetachComplete);
    method public void execute(Runnable runnable);
    method public boolean isRunning();
    method public void registerEGLContextCallback(androidx.graphics.opengl.GLRenderer.EGLContextCallback callback);
    method public void requestRender(androidx.graphics.opengl.GLRenderer.RenderTarget target);
    method public void requestRender(androidx.graphics.opengl.GLRenderer.RenderTarget target, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onRenderComplete);
    method public void resize(androidx.graphics.opengl.GLRenderer.RenderTarget target, int width, int height);
    method public void resize(androidx.graphics.opengl.GLRenderer.RenderTarget target, int width, int height, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onResizeComplete);
    method public void start();
    method public void start(optional String name);
    method public void stop(boolean cancelPending);
    method public void stop(boolean cancelPending, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer,kotlin.Unit>? onStop);
    method public void unregisterEGLContextCallback(androidx.graphics.opengl.GLRenderer.EGLContextCallback callback);
    field public static final androidx.graphics.opengl.GLRenderer.Companion Companion;
  }

  public static final class GLRenderer.Companion {
  }

  public static interface GLRenderer.EGLContextCallback {
    method @WorkerThread public void onEGLContextCreated(androidx.graphics.opengl.egl.EGLManager eglManager);
    method @WorkerThread public void onEGLContextDestroyed(androidx.graphics.opengl.egl.EGLManager eglManager);
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public static interface GLRenderer.RenderCallback {
    method @WorkerThread public void onDrawFrame(androidx.graphics.opengl.egl.EGLManager eglManager);
    method @WorkerThread public default android.opengl.EGLSurface? onSurfaceCreated(androidx.graphics.opengl.egl.EGLSpec spec, android.opengl.EGLConfig config, android.view.Surface surface, int width, int height);
  }

  public static final class GLRenderer.RenderTarget {
    method public void detach(boolean cancelPending);
    method public void detach(boolean cancelPending, optional kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onDetachComplete);
    method public boolean isAttached();
    method public void requestRender();
    method public void requestRender(optional @WorkerThread kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onRenderComplete);
    method public void resize(int width, int height);
    method public void resize(int width, int height, optional @WorkerThread kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.GLRenderer.RenderTarget,kotlin.Unit>? onResizeComplete);
  }

  public interface SyncStrategy {
    method public androidx.hardware.SyncFenceCompat? createSyncFence(androidx.graphics.opengl.egl.EGLSpec eglSpec);
    field public static final androidx.graphics.opengl.SyncStrategy ALWAYS;
    field public static final androidx.graphics.opengl.SyncStrategy.Companion Companion;
  }

  public static final class SyncStrategy.Companion {
  }

}

package androidx.graphics.opengl.egl {

  public final class EGLConfigAttributes {
    method public int[] toArray();
    field public static final androidx.graphics.opengl.egl.EGLConfigAttributes.Companion Companion;
    field public static final int EGL_COLOR_COMPONENT_TYPE_EXT = 13113; // 0x3339
    field public static final int EGL_COLOR_COMPONENT_TYPE_FIXED_EXT = 13114; // 0x333a
    field public static final int EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT = 13115; // 0x333b
    field public static final androidx.graphics.opengl.egl.EGLConfigAttributes RGBA_1010102;
    field public static final androidx.graphics.opengl.egl.EGLConfigAttributes RGBA_8888;
    field public static final androidx.graphics.opengl.egl.EGLConfigAttributes RGBA_F16;
  }

  public static final class EGLConfigAttributes.Builder {
    method public androidx.graphics.opengl.egl.EGLConfigAttributes build();
    method public void include(androidx.graphics.opengl.egl.EGLConfigAttributes attributes);
    method public androidx.graphics.opengl.egl.EGLConfigAttributes.Builder setAttribute(int attribute, int value);
    method @kotlin.jvm.JvmSynthetic public infix void to(int, int that);
  }

  public static final class EGLConfigAttributes.Companion {
  }

  public final class EGLConfigAttributesKt {
    method @kotlin.jvm.JvmSynthetic public static inline androidx.graphics.opengl.egl.EGLConfigAttributes EGLConfigAttributes(kotlin.jvm.functions.Function1<? super androidx.graphics.opengl.egl.EGLConfigAttributes.Builder,kotlin.Unit> block);
  }

  public final class EGLException extends java.lang.RuntimeException {
    ctor public EGLException(int error, optional String msg);
    method public int getError();
    method public String getMsg();
    property public final int error;
    property public String message;
    property public final String msg;
  }

  public final class EGLManager {
    ctor public EGLManager(optional androidx.graphics.opengl.egl.EGLSpec eglSpec);
    method public android.opengl.EGLContext createContext(android.opengl.EGLConfig config);
    method public android.opengl.EGLSurface getCurrentDrawSurface();
    method public android.opengl.EGLSurface getCurrentReadSurface();
    method public android.opengl.EGLSurface getDefaultSurface();
    method public android.opengl.EGLConfig? getEGLConfig();
    method public android.opengl.EGLContext? getEGLContext();
    method public androidx.graphics.opengl.egl.EGLSpec getEGLSpec();
    method public androidx.graphics.opengl.egl.EGLVersion getEGLVersion();
    method public void initialize();
    method public boolean isExtensionSupported(String extensionName);
    method public android.opengl.EGLConfig? loadConfig(androidx.graphics.opengl.egl.EGLConfigAttributes configAttributes);
    method public boolean makeCurrent(android.opengl.EGLSurface drawSurface);
    method public boolean makeCurrent(android.opengl.EGLSurface drawSurface, optional android.opengl.EGLSurface readSurface);
    method public void release();
    method public void swapAndFlushBuffers();
    property public final android.opengl.EGLSurface currentDrawSurface;
    property public final android.opengl.EGLSurface currentReadSurface;
    property public final android.opengl.EGLSurface defaultSurface;
    property public final android.opengl.EGLConfig? eglConfig;
    property public final android.opengl.EGLContext? eglContext;
    property public final androidx.graphics.opengl.egl.EGLSpec eglSpec;
    property public final androidx.graphics.opengl.egl.EGLVersion eglVersion;
    field public static final androidx.graphics.opengl.egl.EGLManager.Companion Companion;
  }

  public static final class EGLManager.Companion {
  }

  @kotlin.jvm.JvmDefaultWithCompatibility public interface EGLSpec {
    method public int eglClientWaitSyncKHR(androidx.opengl.EGLSyncKHR sync, int flags, long timeoutNanos);
    method public android.opengl.EGLContext eglCreateContext(android.opengl.EGLConfig config);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.opengl.EGLImageKHR? eglCreateImageFromHardwareBuffer(android.hardware.HardwareBuffer hardwareBuffer);
    method public android.opengl.EGLSurface eglCreatePBufferSurface(android.opengl.EGLConfig config, androidx.graphics.opengl.egl.EGLConfigAttributes? configAttributes);
    method public androidx.opengl.EGLSyncKHR? eglCreateSyncKHR(int type, androidx.graphics.opengl.egl.EGLConfigAttributes? attributes);
    method public android.opengl.EGLSurface eglCreateWindowSurface(android.opengl.EGLConfig config, android.view.Surface surface, androidx.graphics.opengl.egl.EGLConfigAttributes? configAttributes);
    method public void eglDestroyContext(android.opengl.EGLContext eglContext);
    method public boolean eglDestroyImageKHR(androidx.opengl.EGLImageKHR image);
    method public boolean eglDestroySurface(android.opengl.EGLSurface surface);
    method public boolean eglDestroySyncKHR(androidx.opengl.EGLSyncKHR sync);
    method public android.opengl.EGLSurface eglGetCurrentDrawSurface();
    method public android.opengl.EGLSurface eglGetCurrentReadSurface();
    method public int eglGetError();
    method public boolean eglGetSyncAttribKHR(androidx.opengl.EGLSyncKHR sync, int attribute, int[] value, int offset);
    method public androidx.graphics.opengl.egl.EGLVersion eglInitialize();
    method public boolean eglMakeCurrent(android.opengl.EGLContext context, android.opengl.EGLSurface drawSurface, android.opengl.EGLSurface readSurface);
    method public String eglQueryString(int nameId);
    method public boolean eglQuerySurface(android.opengl.EGLSurface surface, int attribute, int[] result, int offset);
    method public boolean eglSwapBuffers(android.opengl.EGLSurface surface);
    method public default String getErrorMessage();
    method public static String getStatusString(int error);
    method public android.opengl.EGLConfig? loadConfig(androidx.graphics.opengl.egl.EGLConfigAttributes configAttributes);
    field public static final androidx.graphics.opengl.egl.EGLSpec.Companion Companion;
    field public static final androidx.graphics.opengl.egl.EGLSpec V14;
  }

  public static final class EGLSpec.Companion {
    method public String getStatusString(int error);
  }

  public final class EGLVersion {
    ctor public EGLVersion(int major, int minor);
    method public int component1();
    method public int component2();
    method public androidx.graphics.opengl.egl.EGLVersion copy(int major, int minor);
    method public int getMajor();
    method public int getMinor();
    property public final int major;
    property public final int minor;
    field public static final androidx.graphics.opengl.egl.EGLVersion.Companion Companion;
    field public static final androidx.graphics.opengl.egl.EGLVersion Unknown;
    field public static final androidx.graphics.opengl.egl.EGLVersion V14;
    field public static final androidx.graphics.opengl.egl.EGLVersion V15;
  }

  public static final class EGLVersion.Companion {
  }

}

package androidx.graphics.surface {

  @RequiresApi(android.os.Build.VERSION_CODES.Q) public final class SurfaceControlCompat {
    method public boolean isValid();
    method public void release();
    field public static final int BUFFER_TRANSFORM_IDENTITY = 0; // 0x0
    field public static final int BUFFER_TRANSFORM_MIRROR_HORIZONTAL = 1; // 0x1
    field public static final int BUFFER_TRANSFORM_MIRROR_VERTICAL = 2; // 0x2
    field public static final int BUFFER_TRANSFORM_ROTATE_180 = 3; // 0x3
    field public static final int BUFFER_TRANSFORM_ROTATE_270 = 7; // 0x7
    field public static final int BUFFER_TRANSFORM_ROTATE_90 = 4; // 0x4
    field public static final int CHANGE_FRAME_RATE_ALWAYS = 1; // 0x1
    field public static final int CHANGE_FRAME_RATE_ONLY_IF_SEAMLESS = 0; // 0x0
    field public static final androidx.graphics.surface.SurfaceControlCompat.Companion Companion;
    field public static final int FRAME_RATE_COMPATIBILITY_DEFAULT = 0; // 0x0
    field public static final int FRAME_RATE_COMPATIBILITY_FIXED_SOURCE = 1; // 0x1
  }

  public static final class SurfaceControlCompat.Builder {
    ctor public SurfaceControlCompat.Builder();
    method public androidx.graphics.surface.SurfaceControlCompat build();
    method public androidx.graphics.surface.SurfaceControlCompat.Builder setName(String name);
    method public androidx.graphics.surface.SurfaceControlCompat.Builder setParent(android.view.SurfaceView surfaceView);
    method public androidx.graphics.surface.SurfaceControlCompat.Builder setParent(androidx.graphics.surface.SurfaceControlCompat surfaceControl);
  }

  public static final class SurfaceControlCompat.Companion {
  }

  @RequiresApi(android.os.Build.VERSION_CODES.Q) public static final class SurfaceControlCompat.Transaction implements java.lang.AutoCloseable {
    ctor public SurfaceControlCompat.Transaction();
    method @RequiresApi(android.os.Build.VERSION_CODES.S) public androidx.graphics.surface.SurfaceControlCompat.Transaction addTransactionCommittedListener(java.util.concurrent.Executor executor, androidx.graphics.surface.SurfaceControlCompat.TransactionCommittedListener listener);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction clearFrameRate(androidx.graphics.surface.SurfaceControlCompat surfaceControl);
    method public void close();
    method public void commit();
    method @RequiresApi(android.os.Build.VERSION_CODES.TIRAMISU) public void commitTransactionOnDraw(android.view.AttachedSurfaceControl attachedSurfaceControl);
    method @RequiresApi(android.os.Build.VERSION_CODES.TIRAMISU) public androidx.graphics.surface.SurfaceControlCompat.Transaction reparent(androidx.graphics.surface.SurfaceControlCompat surfaceControl, android.view.AttachedSurfaceControl attachedSurfaceControl);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction reparent(androidx.graphics.surface.SurfaceControlCompat surfaceControl, androidx.graphics.surface.SurfaceControlCompat? newParent);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setAlpha(androidx.graphics.surface.SurfaceControlCompat surfaceControl, float alpha);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setBuffer(androidx.graphics.surface.SurfaceControlCompat surfaceControl, android.hardware.HardwareBuffer? buffer);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setBuffer(androidx.graphics.surface.SurfaceControlCompat surfaceControl, android.hardware.HardwareBuffer? buffer, optional androidx.hardware.SyncFenceCompat? fence);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setBuffer(androidx.graphics.surface.SurfaceControlCompat surfaceControl, android.hardware.HardwareBuffer? buffer, optional androidx.hardware.SyncFenceCompat? fence, optional kotlin.jvm.functions.Function1<? super androidx.hardware.SyncFenceCompat,kotlin.Unit>? releaseCallback);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setBufferTransform(androidx.graphics.surface.SurfaceControlCompat surfaceControl, int transformation);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setCrop(androidx.graphics.surface.SurfaceControlCompat surfaceControl, android.graphics.Rect? crop);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setDamageRegion(androidx.graphics.surface.SurfaceControlCompat surfaceControl, android.graphics.Region? region);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setDataSpace(androidx.graphics.surface.SurfaceControlCompat surfaceControl, int dataSpace);
    method @RequiresApi(android.os.Build.VERSION_CODES.UPSIDE_DOWN_CAKE) public androidx.graphics.surface.SurfaceControlCompat.Transaction setExtendedRangeBrightness(androidx.graphics.surface.SurfaceControlCompat surfaceControl, @FloatRange(from=1.0, fromInclusive=true) float currentBufferRatio, @FloatRange(from=1.0, fromInclusive=true) float desiredRatio);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setFrameRate(androidx.graphics.surface.SurfaceControlCompat surfaceControl, float frameRate, int compatibility, int changeFrameRateStrategy);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setLayer(androidx.graphics.surface.SurfaceControlCompat surfaceControl, int z);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setOpaque(androidx.graphics.surface.SurfaceControlCompat surfaceControl, boolean isOpaque);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setPosition(androidx.graphics.surface.SurfaceControlCompat surfaceControl, float x, float y);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setScale(androidx.graphics.surface.SurfaceControlCompat surfaceControl, float scaleX, float scaleY);
    method public androidx.graphics.surface.SurfaceControlCompat.Transaction setVisibility(androidx.graphics.surface.SurfaceControlCompat surfaceControl, boolean visible);
  }

  public static interface SurfaceControlCompat.TransactionCommittedListener {
    method public void onTransactionCommitted();
  }

}

package androidx.hardware {

  public final class DataSpace {
    field public static final androidx.hardware.DataSpace.Companion Companion;
    field public static final int DATASPACE_ADOBE_RGB = 151715840; // 0x90b0000
    field public static final int DATASPACE_BT2020 = 147193856; // 0x8c60000
    field public static final int DATASPACE_BT2020_HLG = 168165376; // 0xa060000
    field public static final int DATASPACE_BT2020_PQ = 163971072; // 0x9c60000
    field public static final int DATASPACE_BT601_525 = 281280512; // 0x10c40000
    field public static final int DATASPACE_BT601_625 = 281149440; // 0x10c20000
    field public static final int DATASPACE_BT709 = 281083904; // 0x10c10000
    field public static final int DATASPACE_DCI_P3 = 155844608; // 0x94a0000
    field public static final int DATASPACE_DEPTH = 4096; // 0x1000
    field public static final int DATASPACE_DISPLAY_P3 = 143261696; // 0x88a0000
    field public static final int DATASPACE_DYNAMIC_DEPTH = 4098; // 0x1002
    field public static final int DATASPACE_HEIF = 4100; // 0x1004
    field public static final int DATASPACE_JFIF = 146931712; // 0x8c20000
    field public static final int DATASPACE_JPEG_R = 4101; // 0x1005
    field public static final int DATASPACE_SCRGB = 411107328; // 0x18810000
    field public static final int DATASPACE_SCRGB_LINEAR = 406913024; // 0x18410000
    field public static final int DATASPACE_SRGB = 142671872; // 0x8810000
    field public static final int DATASPACE_SRGB_LINEAR = 138477568; // 0x8410000
    field public static final int DATASPACE_UNKNOWN = 0; // 0x0
    field public static final int RANGE_EXTENDED = 402653184; // 0x18000000
    field public static final int RANGE_FULL = 134217728; // 0x8000000
    field public static final int RANGE_LIMITED = 268435456; // 0x10000000
    field public static final int RANGE_UNSPECIFIED = 0; // 0x0
  }

  public static final class DataSpace.Companion {
  }

  public final class SyncFenceCompat implements java.lang.AutoCloseable {
    method public boolean await(long timeoutNanos);
    method public boolean awaitForever();
    method public void close();
    method public static androidx.hardware.SyncFenceCompat createNativeSyncFence();
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public long getSignalTimeNanos();
    method public boolean isValid();
    field public static final androidx.hardware.SyncFenceCompat.Companion Companion;
    field public static final long SIGNAL_TIME_INVALID = -1L; // 0xffffffffffffffffL
    field public static final long SIGNAL_TIME_PENDING = 9223372036854775807L; // 0x7fffffffffffffffL
  }

  public static final class SyncFenceCompat.Companion {
    method public androidx.hardware.SyncFenceCompat createNativeSyncFence();
  }

}

package androidx.opengl {

  public final class EGLExt {
    method public static int eglClientWaitSyncKHR(android.opengl.EGLDisplay eglDisplay, androidx.opengl.EGLSyncKHR sync, int flags, long timeoutNanos);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public static androidx.opengl.EGLImageKHR? eglCreateImageFromHardwareBuffer(android.opengl.EGLDisplay eglDisplay, android.hardware.HardwareBuffer hardwareBuffer);
    method public static androidx.opengl.EGLSyncKHR? eglCreateSyncKHR(android.opengl.EGLDisplay eglDisplay, int type, androidx.graphics.opengl.egl.EGLConfigAttributes? attributes);
    method public static boolean eglDestroyImageKHR(android.opengl.EGLDisplay eglDisplay, androidx.opengl.EGLImageKHR image);
    method public static boolean eglDestroySyncKHR(android.opengl.EGLDisplay eglDisplay, androidx.opengl.EGLSyncKHR eglSync);
    method public static boolean eglGetSyncAttribKHR(android.opengl.EGLDisplay eglDisplay, androidx.opengl.EGLSyncKHR sync, int attribute, int[] value, int offset);
    method public static void glEGLImageTargetTexture2DOES(int target, androidx.opengl.EGLImageKHR image);
    method public static java.util.Set<java.lang.String> parseExtensions(String queryString);
    field public static final androidx.opengl.EGLExt.Companion Companion;
    field public static final String EGL_ANDROID_CLIENT_BUFFER = "EGL_ANDROID_get_native_client_buffer";
    field public static final String EGL_ANDROID_IMAGE_NATIVE_BUFFER = "EGL_ANDROID_image_native_buffer";
    field public static final String EGL_ANDROID_NATIVE_FENCE_SYNC = "EGL_ANDROID_native_fence_sync";
    field public static final int EGL_CONDITION_SATISFIED_KHR = 12534; // 0x30f6
    field public static final String EGL_EXT_BUFFER_AGE = "EGL_EXT_buffer_age";
    field public static final String EGL_EXT_GL_COLORSPACE_BT2020_PQ = "EGL_EXT_gl_colorspace_bt2020_pq";
    field public static final String EGL_EXT_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH = "EGL_EXT_gl_colorspace_display_p3_passthrough";
    field public static final String EGL_EXT_GL_COLORSPACE_SCRGB = "EGL_EXT_gl_colorspace_scrgb";
    field public static final String EGL_EXT_PIXEL_FORMAT_FLOAT = "EGL_EXT_pixel_format_float";
    field public static final int EGL_FALSE = 0; // 0x0
    field public static final long EGL_FOREVER_KHR = -1L; // 0xffffffffffffffffL
    field public static final String EGL_IMG_CONTEXT_PRIORITY = "EGL_IMG_context_priority";
    field public static final String EGL_KHR_FENCE_SYNC = "EGL_KHR_fence_sync";
    field public static final String EGL_KHR_GL_COLORSPACE = "EGL_KHR_gl_colorspace";
    field public static final String EGL_KHR_IMAGE = "EGL_KHR_image";
    field public static final String EGL_KHR_IMAGE_BASE = "EGL_KHR_image_base";
    field public static final String EGL_KHR_NO_CONFIG_CONTEXT = "EGL_KHR_no_config_context";
    field public static final String EGL_KHR_PARTIAL_UPDATE = "EGL_KHR_partial_update";
    field public static final String EGL_KHR_SURFACELESS_CONTEXT = "EGL_KHR_surfaceless_context";
    field public static final String EGL_KHR_SWAP_BUFFERS_WITH_DAMAGE = "EGL_KHR_swap_buffers_with_damage";
    field public static final String EGL_KHR_WAIT_SYNC = "EGL_KHR_wait_sync";
    field public static final int EGL_SIGNALED_KHR = 12530; // 0x30f2
    field public static final int EGL_SYNC_CONDITION_KHR = 12536; // 0x30f8
    field public static final int EGL_SYNC_FENCE_KHR = 12537; // 0x30f9
    field public static final int EGL_SYNC_FLUSH_COMMANDS_BIT_KHR = 1; // 0x1
    field public static final int EGL_SYNC_NATIVE_FENCE_ANDROID = 12612; // 0x3144
    field public static final int EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR = 12528; // 0x30f0
    field public static final int EGL_SYNC_STATUS_KHR = 12529; // 0x30f1
    field public static final int EGL_SYNC_TYPE_KHR = 12535; // 0x30f7
    field public static final int EGL_TIMEOUT_EXPIRED_KHR = 12533; // 0x30f5
    field public static final int EGL_TRUE = 1; // 0x1
    field public static final int EGL_UNSIGNALED_KHR = 12531; // 0x30f3
  }

  public static final class EGLExt.Companion {
    method public int eglClientWaitSyncKHR(android.opengl.EGLDisplay eglDisplay, androidx.opengl.EGLSyncKHR sync, int flags, long timeoutNanos);
    method @RequiresApi(android.os.Build.VERSION_CODES.O) public androidx.opengl.EGLImageKHR? eglCreateImageFromHardwareBuffer(android.opengl.EGLDisplay eglDisplay, android.hardware.HardwareBuffer hardwareBuffer);
    method public androidx.opengl.EGLSyncKHR? eglCreateSyncKHR(android.opengl.EGLDisplay eglDisplay, int type, androidx.graphics.opengl.egl.EGLConfigAttributes? attributes);
    method public boolean eglDestroyImageKHR(android.opengl.EGLDisplay eglDisplay, androidx.opengl.EGLImageKHR image);
    method public boolean eglDestroySyncKHR(android.opengl.EGLDisplay eglDisplay, androidx.opengl.EGLSyncKHR eglSync);
    method public boolean eglGetSyncAttribKHR(android.opengl.EGLDisplay eglDisplay, androidx.opengl.EGLSyncKHR sync, int attribute, int[] value, int offset);
    method public void glEGLImageTargetTexture2DOES(int target, androidx.opengl.EGLImageKHR image);
    method public java.util.Set<java.lang.String> parseExtensions(String queryString);
  }

  public interface EGLHandle {
    method public long getNativeHandle();
    property public abstract long nativeHandle;
  }

  public final class EGLImageKHR implements androidx.opengl.EGLHandle {
    ctor public EGLImageKHR(long nativeHandle);
    method public long getNativeHandle();
    property public long nativeHandle;
  }

  public final class EGLSyncKHR implements androidx.opengl.EGLHandle {
    ctor public EGLSyncKHR(long nativeHandle);
    method public long getNativeHandle();
    property public long nativeHandle;
  }

}

