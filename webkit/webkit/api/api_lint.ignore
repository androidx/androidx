// Baseline format: 1.0
ArrayReturn: androidx.webkit.WebMessageCompat#WebMessageCompat(String, androidx.webkit.WebMessagePortCompat[]) parameter #1:
    Method parameter should be Collection<WebMessagePortCompat> (or subclass) instead of raw array; was `androidx.webkit.WebMessagePortCompat[]`
ArrayReturn: androidx.webkit.WebMessageCompat#WebMessageCompat(byte[], androidx.webkit.WebMessagePortCompat[]) parameter #1:
    Method parameter should be Collection<WebMessagePortCompat> (or subclass) instead of raw array; was `androidx.webkit.WebMessagePortCompat[]`
ArrayReturn: androidx.webkit.WebMessageCompat#getPorts():
    Method should return Collection<WebMessagePortCompat> (or subclass) instead of raw array; was `androidx.webkit.WebMessagePortCompat[]`
ArrayReturn: androidx.webkit.WebViewCompat#createWebMessageChannel(android.webkit.WebView):
    Method should return Collection<WebMessagePortCompat> (or subclass) instead of raw array; was `androidx.webkit.WebMessagePortCompat[]`


BuilderSetStyle: androidx.webkit.ProxyConfig.Builder#bypassSimpleHostnames():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.webkit.ProxyConfig.Builder.bypassSimpleHostnames()
BuilderSetStyle: androidx.webkit.ProxyConfig.Builder#removeImplicitRules():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.webkit.ProxyConfig.Builder.removeImplicitRules()


GetterSetterNames: androidx.webkit.ServiceWorkerWebSettingsCompat#getAllowContentAccess():
    Symmetric method for `setAllowContentAccess` must be named `isAllowContentAccess`; was `getAllowContentAccess`
GetterSetterNames: androidx.webkit.ServiceWorkerWebSettingsCompat#getAllowFileAccess():
    Symmetric method for `setAllowFileAccess` must be named `isAllowFileAccess`; was `getAllowFileAccess`
GetterSetterNames: androidx.webkit.ServiceWorkerWebSettingsCompat#getBlockNetworkLoads():
    Symmetric method for `setBlockNetworkLoads` must be named `isBlockNetworkLoads`; was `getBlockNetworkLoads`


InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onPageCommitVisible(android.webkit.WebView, String) parameter #0:
    Invalid nullability on parameter `view` in method `onPageCommitVisible`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onPageCommitVisible(android.webkit.WebView, String) parameter #1:
    Invalid nullability on parameter `url` in method `onPageCommitVisible`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onReceivedError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceError) parameter #0:
    Invalid nullability on parameter `view` in method `onReceivedError`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onReceivedError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceError) parameter #1:
    Invalid nullability on parameter `request` in method `onReceivedError`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onReceivedError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceError) parameter #2:
    Invalid nullability on parameter `error` in method `onReceivedError`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onReceivedHttpError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceResponse) parameter #0:
    Invalid nullability on parameter `view` in method `onReceivedHttpError`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onReceivedHttpError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceResponse) parameter #1:
    Invalid nullability on parameter `request` in method `onReceivedHttpError`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onReceivedHttpError(android.webkit.WebView, android.webkit.WebResourceRequest, android.webkit.WebResourceResponse) parameter #2:
    Invalid nullability on parameter `errorResponse` in method `onReceivedHttpError`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onSafeBrowsingHit(android.webkit.WebView, android.webkit.WebResourceRequest, int, android.webkit.SafeBrowsingResponse) parameter #0:
    Invalid nullability on parameter `view` in method `onSafeBrowsingHit`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onSafeBrowsingHit(android.webkit.WebView, android.webkit.WebResourceRequest, int, android.webkit.SafeBrowsingResponse) parameter #1:
    Invalid nullability on parameter `request` in method `onSafeBrowsingHit`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#onSafeBrowsingHit(android.webkit.WebView, android.webkit.WebResourceRequest, int, android.webkit.SafeBrowsingResponse) parameter #3:
    Invalid nullability on parameter `response` in method `onSafeBrowsingHit`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#shouldOverrideUrlLoading(android.webkit.WebView, android.webkit.WebResourceRequest) parameter #0:
    Invalid nullability on parameter `view` in method `shouldOverrideUrlLoading`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.webkit.WebViewClientCompat#shouldOverrideUrlLoading(android.webkit.WebView, android.webkit.WebResourceRequest) parameter #1:
    Invalid nullability on parameter `request` in method `shouldOverrideUrlLoading`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.


MissingGetterMatchingBuilder: androidx.webkit.ProxyConfig.Builder#addDirect():
    androidx.webkit.ProxyConfig does not declare a `getDirects()` method matching method androidx.webkit.ProxyConfig.Builder.addDirect()
MissingGetterMatchingBuilder: androidx.webkit.ProxyConfig.Builder#addDirect(String):
    androidx.webkit.ProxyConfig does not declare a `getDirects()` method matching method androidx.webkit.ProxyConfig.Builder.addDirect(String)
MissingGetterMatchingBuilder: androidx.webkit.TracingConfig.Builder#addCategories(int...):
    androidx.webkit.TracingConfig does not declare a getter method matching method androidx.webkit.TracingConfig.Builder.addCategories(int...) (expected one of: [getCategories(), getCategorieses()])
MissingGetterMatchingBuilder: androidx.webkit.TracingConfig.Builder#addCategories(java.lang.String...):
    androidx.webkit.TracingConfig does not declare a getter method matching method androidx.webkit.TracingConfig.Builder.addCategories(java.lang.String...) (expected one of: [getCategories(), getCategorieses()])
MissingGetterMatchingBuilder: androidx.webkit.TracingConfig.Builder#addCategories(java.util.Collection<java.lang.String>):
    androidx.webkit.TracingConfig does not declare a getter method matching method androidx.webkit.TracingConfig.Builder.addCategories(java.util.Collection<java.lang.String>) (expected one of: [getCategories(), getCategorieses()])
MissingGetterMatchingBuilder: androidx.webkit.WebViewAssetLoader.Builder#addPathHandler(String, androidx.webkit.WebViewAssetLoader.PathHandler):
    androidx.webkit.WebViewAssetLoader does not declare a `getPathHandlers()` method matching method androidx.webkit.WebViewAssetLoader.Builder.addPathHandler(String,androidx.webkit.WebViewAssetLoader.PathHandler)
MissingGetterMatchingBuilder: androidx.webkit.WebViewAssetLoader.Builder#setDomain(String):
    androidx.webkit.WebViewAssetLoader does not declare a `getDomain()` method matching method androidx.webkit.WebViewAssetLoader.Builder.setDomain(String)
MissingGetterMatchingBuilder: androidx.webkit.WebViewAssetLoader.Builder#setHttpAllowed(boolean):
    androidx.webkit.WebViewAssetLoader does not declare a `isHttpAllowed()` method matching method androidx.webkit.WebViewAssetLoader.Builder.setHttpAllowed(boolean)


NotCloseable: androidx.webkit.TracingController:
    Classes that release resources (stop()) should implement AutoCloseable and CloseGuard: class androidx.webkit.TracingController
NotCloseable: androidx.webkit.WebMessagePortCompat:
    Classes that release resources (close()) should implement AutoCloseable and CloseGuard: class androidx.webkit.WebMessagePortCompat


NullableCollection: androidx.webkit.WebMessageCompat#getPorts():
    Return type of method androidx.webkit.WebMessageCompat.getPorts() is a nullable collection (`androidx.webkit.WebMessagePortCompat[]`); must be non-null


StaticFinalBuilder: androidx.webkit.TracingConfig.Builder:
    Builder must be final: androidx.webkit.TracingConfig.Builder


StreamFiles: androidx.webkit.WebViewAssetLoader.InternalStoragePathHandler#InternalStoragePathHandler(android.content.Context, java.io.File):
    Methods accepting `File` should also accept `FileDescriptor` or streams: constructor androidx.webkit.WebViewAssetLoader.InternalStoragePathHandler(android.content.Context,java.io.File)
