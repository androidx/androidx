// Baseline format: 1.0
AcronymName: androidx.core.database.sqlite.SQLiteCursorCompat:
    Acronyms should not be capitalized in class names: was `SQLiteCursorCompat`, should this be `SqLiteCursorCompat`?
AcronymName: androidx.core.graphics.ColorUtils#blendARGB(int, int, float):
    Acronyms should not be capitalized in method names: was `blendARGB`, should this be `blendArgb`?
AcronymName: androidx.core.graphics.ColorUtils#blendHSL(float[], float[], float, float[]):
    Acronyms should not be capitalized in method names: was `blendHSL`, should this be `blendHsl`?
AcronymName: androidx.core.graphics.ColorUtils#blendLAB(double[], double[], double, double[]):
    Acronyms should not be capitalized in method names: was `blendLAB`, should this be `blendLab`?
AcronymName: androidx.core.graphics.ColorUtils#colorToHSL(int, float[]):
    Acronyms should not be capitalized in method names: was `colorToHSL`, should this be `colorToHsl`?
AcronymName: androidx.core.graphics.ColorUtils#colorToLAB(int, double[]):
    Acronyms should not be capitalized in method names: was `colorToLAB`, should this be `colorToLab`?
AcronymName: androidx.core.graphics.ColorUtils#colorToXYZ(int, double[]):
    Acronyms should not be capitalized in method names: was `colorToXYZ`, should this be `colorToXyz`?
AcronymName: androidx.core.text.ICUCompat:
    Acronyms should not be capitalized in class names: was `ICUCompat`, should this be `IcuCompat`?
AcronymName: androidx.core.view.accessibility.AccessibilityViewCommand.MoveHtmlArguments#getHTMLElement():
    Acronyms should not be capitalized in method names: was `getHTMLElement`, should this be `getHtmlElement`?


ActionValue: androidx.core.app.ActivityOptionsCompat#EXTRA_USAGE_TIME_REPORT:
    Inconsistent extra value; expected `androidx.core.app.extra.USAGE_TIME_REPORT`, was `android.activity.usage_time`
ActionValue: androidx.core.app.ActivityOptionsCompat#EXTRA_USAGE_TIME_REPORT_PACKAGES:
    Inconsistent extra value; expected `androidx.core.app.extra.USAGE_TIME_REPORT_PACKAGES`, was `android.usage_time_packages`
ActionValue: androidx.core.app.NotificationCompatExtras#EXTRA_ACTION_EXTRAS:
    Inconsistent extra value; expected `androidx.core.app.extra.ACTION_EXTRAS`, was `android.support.actionExtras`
ActionValue: androidx.core.app.NotificationCompatExtras#EXTRA_GROUP_KEY:
    Inconsistent extra value; expected `androidx.core.app.extra.GROUP_KEY`, was `android.support.groupKey`
ActionValue: androidx.core.app.NotificationCompatExtras#EXTRA_GROUP_SUMMARY:
    Inconsistent extra value; expected `androidx.core.app.extra.GROUP_SUMMARY`, was `android.support.isGroupSummary`
ActionValue: androidx.core.app.NotificationCompatExtras#EXTRA_LOCAL_ONLY:
    Inconsistent extra value; expected `androidx.core.app.extra.LOCAL_ONLY`, was `android.support.localOnly`
ActionValue: androidx.core.app.NotificationCompatExtras#EXTRA_REMOTE_INPUTS:
    Inconsistent extra value; expected `androidx.core.app.extra.REMOTE_INPUTS`, was `android.support.remoteInputs`
ActionValue: androidx.core.app.NotificationCompatExtras#EXTRA_SORT_KEY:
    Inconsistent extra value; expected `androidx.core.app.extra.SORT_KEY`, was `android.support.sortKey`
ActionValue: androidx.core.app.NotificationManagerCompat#ACTION_BIND_SIDE_CHANNEL:
    Inconsistent action value; expected `androidx.core.app.action.BIND_SIDE_CHANNEL`, was `android.support.BIND_NOTIFICATION_SIDE_CHANNEL`
ActionValue: androidx.core.app.NotificationManagerCompat#EXTRA_USE_SIDE_CHANNEL:
    Inconsistent extra value; expected `androidx.core.app.extra.USE_SIDE_CHANNEL`, was `android.support.useSideChannel`
ActionValue: androidx.core.app.RemoteInput#EXTRA_RESULTS_DATA:
    Inconsistent extra value; expected `androidx.core.app.extra.RESULTS_DATA`, was `android.remoteinput.resultsData`
ActionValue: androidx.core.app.ShareCompat#EXTRA_CALLING_ACTIVITY:
    Inconsistent extra value; expected `androidx.core.app.extra.CALLING_ACTIVITY`, was `androidx.core.app.EXTRA_CALLING_ACTIVITY`
ActionValue: androidx.core.app.ShareCompat#EXTRA_CALLING_ACTIVITY_INTEROP:
    Inconsistent extra value; expected `androidx.core.app.extra.CALLING_ACTIVITY_INTEROP`, was `android.support.v4.app.EXTRA_CALLING_ACTIVITY`
ActionValue: androidx.core.app.ShareCompat#EXTRA_CALLING_PACKAGE:
    Inconsistent extra value; expected `androidx.core.app.extra.CALLING_PACKAGE`, was `androidx.core.app.EXTRA_CALLING_PACKAGE`
ActionValue: androidx.core.app.ShareCompat#EXTRA_CALLING_PACKAGE_INTEROP:
    Inconsistent extra value; expected `androidx.core.app.extra.CALLING_PACKAGE_INTEROP`, was `android.support.v4.app.EXTRA_CALLING_PACKAGE`
ActionValue: androidx.core.content.IntentCompat#EXTRA_HTML_TEXT:
    Inconsistent extra value; expected `androidx.core.content.extra.HTML_TEXT`, was `android.intent.extra.HTML_TEXT`
ActionValue: androidx.core.content.IntentCompat#EXTRA_START_PLAYBACK:
    Inconsistent extra value; expected `androidx.core.content.extra.START_PLAYBACK`, was `android.intent.extra.START_PLAYBACK`
ActionValue: androidx.core.content.pm.ShortcutManagerCompat#EXTRA_SHORTCUT_ID:
    Inconsistent extra value; expected `androidx.core.content.pm.extra.SHORTCUT_ID`, was `android.intent.extra.shortcut.ID`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_COLUMN_INT:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_COLUMN_INT`, was `android.view.accessibility.action.ARGUMENT_COLUMN_INT`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_EXTEND_SELECTION_BOOLEAN`, was `ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_HTML_ELEMENT_STRING:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_HTML_ELEMENT_STRING`, was `ACTION_ARGUMENT_HTML_ELEMENT_STRING`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_MOVEMENT_GRANULARITY_INT`, was `ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_MOVE_WINDOW_X:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_MOVE_WINDOW_X`, was `ACTION_ARGUMENT_MOVE_WINDOW_X`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_MOVE_WINDOW_Y:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_MOVE_WINDOW_Y`, was `ACTION_ARGUMENT_MOVE_WINDOW_Y`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_PROGRESS_VALUE:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_PROGRESS_VALUE`, was `android.view.accessibility.action.ARGUMENT_PROGRESS_VALUE`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_ROW_INT:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_ROW_INT`, was `android.view.accessibility.action.ARGUMENT_ROW_INT`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_SELECTION_END_INT:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_SELECTION_END_INT`, was `ACTION_ARGUMENT_SELECTION_END_INT`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_SELECTION_START_INT:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_SELECTION_START_INT`, was `ACTION_ARGUMENT_SELECTION_START_INT`
ActionValue: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE:
    Inconsistent action value; expected `androidx.core.view.accessibility.action.ARGUMENT_SET_TEXT_CHARSEQUENCE`, was `ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE`


ArrayReturn: androidx.core.app.FrameMetricsAggregator#getMetrics():
    Method should return Collection<SparseIntArray> (or subclass) instead of raw array; was `android.util.SparseIntArray[]`
ArrayReturn: androidx.core.app.FrameMetricsAggregator#remove(android.app.Activity):
    Method should return Collection<SparseIntArray> (or subclass) instead of raw array; was `android.util.SparseIntArray[]`
ArrayReturn: androidx.core.app.FrameMetricsAggregator#reset():
    Method should return Collection<SparseIntArray> (or subclass) instead of raw array; was `android.util.SparseIntArray[]`
ArrayReturn: androidx.core.app.FrameMetricsAggregator#stop():
    Method should return Collection<SparseIntArray> (or subclass) instead of raw array; was `android.util.SparseIntArray[]`
ArrayReturn: androidx.core.app.NotificationCompat.Action#getDataOnlyRemoteInputs():
    Method should return Collection<RemoteInput> (or subclass) instead of raw array; was `androidx.core.app.RemoteInput[]`
ArrayReturn: androidx.core.app.NotificationCompat.Action#getRemoteInputs():
    Method should return Collection<RemoteInput> (or subclass) instead of raw array; was `androidx.core.app.RemoteInput[]`
ArrayReturn: androidx.core.app.NotificationCompat.Builder#setRemoteInputHistory(CharSequence[]) parameter #0:
    Method parameter should be Collection<CharSequence> (or subclass) instead of raw array; was `java.lang.CharSequence[]`
ArrayReturn: androidx.core.app.RemoteInput#addResultsToIntent(androidx.core.app.RemoteInput[], android.content.Intent, android.os.Bundle) parameter #0:
    Method parameter should be Collection<RemoteInput> (or subclass) instead of raw array; was `androidx.core.app.RemoteInput[]`
ArrayReturn: androidx.core.app.RemoteInput#getChoices():
    Method should return Collection<CharSequence> (or subclass) instead of raw array; was `java.lang.CharSequence[]`
ArrayReturn: androidx.core.app.RemoteInput.Builder#setChoices(CharSequence[]) parameter #0:
    Method parameter should be Collection<CharSequence> (or subclass) instead of raw array; was `java.lang.CharSequence[]`
ArrayReturn: androidx.core.app.TaskStackBuilder#getIntents():
    Method should return Collection<Intent> (or subclass) instead of raw array; was `android.content.Intent[]`
ArrayReturn: androidx.core.content.ContextCompat#getExternalCacheDirs(android.content.Context):
    Method should return Collection<File> (or subclass) instead of raw array; was `java.io.File[]`
ArrayReturn: androidx.core.content.ContextCompat#getExternalFilesDirs(android.content.Context, String):
    Method should return Collection<File> (or subclass) instead of raw array; was `java.io.File[]`
ArrayReturn: androidx.core.content.ContextCompat#getObbDirs(android.content.Context):
    Method should return Collection<File> (or subclass) instead of raw array; was `java.io.File[]`
ArrayReturn: androidx.core.content.ContextCompat#startActivities(android.content.Context, android.content.Intent[]) parameter #1:
    Method parameter should be Collection<Intent> (or subclass) instead of raw array; was `android.content.Intent[]`
ArrayReturn: androidx.core.content.ContextCompat#startActivities(android.content.Context, android.content.Intent[], android.os.Bundle) parameter #1:
    Method parameter should be Collection<Intent> (or subclass) instead of raw array; was `android.content.Intent[]`
ArrayReturn: androidx.core.content.pm.ShortcutInfoCompat#getIntents():
    Method should return Collection<Intent> (or subclass) instead of raw array; was `android.content.Intent[]`
ArrayReturn: androidx.core.content.pm.ShortcutInfoCompat.Builder#setIntents(android.content.Intent[]) parameter #0:
    Method parameter should be Collection<Intent> (or subclass) instead of raw array; was `android.content.Intent[]`
ArrayReturn: androidx.core.content.pm.ShortcutInfoCompat.Builder#setPersons(androidx.core.app.Person[]) parameter #0:
    Method parameter should be Collection<Person> (or subclass) instead of raw array; was `androidx.core.app.Person[]`
ArrayReturn: androidx.core.hardware.display.DisplayManagerCompat#getDisplays():
    Method should return Collection<Display> (or subclass) instead of raw array; was `android.view.Display[]`
ArrayReturn: androidx.core.hardware.display.DisplayManagerCompat#getDisplays(String):
    Method should return Collection<Display> (or subclass) instead of raw array; was `android.view.Display[]`
ArrayReturn: androidx.core.provider.FontsContractCompat#buildTypeface(android.content.Context, android.os.CancellationSignal, androidx.core.provider.FontsContractCompat.FontInfo[]) parameter #2:
    Method parameter should be Collection<FontInfo> (or subclass) instead of raw array; was `androidx.core.provider.FontsContractCompat.FontInfo[]`
ArrayReturn: androidx.core.provider.FontsContractCompat.FontFamilyResult#getFonts():
    Method should return Collection<FontInfo> (or subclass) instead of raw array; was `androidx.core.provider.FontsContractCompat.FontInfo[]`
ArrayReturn: androidx.core.text.PrecomputedTextCompat#getSpans(int, int, Class<T>):
    Method should return Collection<Object> (or subclass) instead of raw array; was `T[]`
ArrayReturn: androidx.core.widget.TextViewCompat#getCompoundDrawablesRelative(android.widget.TextView):
    Method should return Collection<Drawable> (or subclass) instead of raw array; was `android.graphics.drawable.Drawable[]`


AsyncSuffixFuture: androidx.core.content.PackageManagerCompat#getUnusedAppRestrictionsStatus(android.content.Context):
    Methods returning com.google.common.util.concurrent.ListenableFuture should have a suffix *Async to reserve unmodified name for a suspend function


BadFuture: androidx.core.text.PrecomputedTextCompat#getTextFuture(CharSequence, androidx.core.text.PrecomputedTextCompat.Params, java.util.concurrent.Executor):
    Use ListenableFuture (library), or a combination of OutcomeReceiver<R,E>, Executor, and CancellationSignal (platform) instead of java.util.concurrent.Future (method androidx.core.text.PrecomputedTextCompat.getTextFuture(CharSequence,androidx.core.text.PrecomputedTextCompat.Params,java.util.concurrent.Executor))


BannedThrow: androidx.core.content.res.ResourcesCompat#getCachedFont(android.content.Context, int):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.content.res.ResourcesCompat#getColor(android.content.res.Resources, int, android.content.res.Resources.Theme):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.content.res.ResourcesCompat#getColorStateList(android.content.res.Resources, int, android.content.res.Resources.Theme):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.content.res.ResourcesCompat#getDrawable(android.content.res.Resources, int, android.content.res.Resources.Theme):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.content.res.ResourcesCompat#getDrawableForDensity(android.content.res.Resources, int, int, android.content.res.Resources.Theme):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.content.res.ResourcesCompat#getFont(android.content.Context, int):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.content.res.ResourcesCompat#getFont(android.content.Context, int, androidx.core.content.res.ResourcesCompat.FontCallback, android.os.Handler):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.net.MailTo#parse(String):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.net.MailTo#parse(android.net.Uri):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.widget.TextViewCompat#setAutoSizeTextTypeUniformWithConfiguration(android.widget.TextView, int, int, int, int):
    Methods must not throw unchecked exceptions
BannedThrow: androidx.core.widget.TextViewCompat#setAutoSizeTextTypeUniformWithPresetSizes(android.widget.TextView, int[], int):
    Methods must not throw unchecked exceptions


BuilderSetStyle: androidx.core.app.NotificationCompat.Action.Builder#extend(androidx.core.app.NotificationCompat.Action.Extender):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.core.app.NotificationCompat.Action.Builder.extend(androidx.core.app.NotificationCompat.Action.Extender)
BuilderSetStyle: androidx.core.app.NotificationCompat.Builder#extend(androidx.core.app.NotificationCompat.Extender):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.core.app.NotificationCompat.Builder.extend(androidx.core.app.NotificationCompat.Extender)
BuilderSetStyle: androidx.core.app.NotificationCompat.Builder#limitCharSequenceLength(CharSequence):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.core.app.NotificationCompat.Builder.limitCharSequenceLength(CharSequence)
BuilderSetStyle: androidx.core.app.ShareCompat.IntentBuilder#createChooserIntent():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.core.app.ShareCompat.IntentBuilder.createChooserIntent()
BuilderSetStyle: androidx.core.app.ShareCompat.IntentBuilder#startChooser():
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.core.app.ShareCompat.IntentBuilder.startChooser()
BuilderSetStyle: androidx.core.text.BidiFormatter.Builder#stereoReset(boolean):
    Builder methods names should use setFoo() / addFoo() / clearFoo() style: method androidx.core.text.BidiFormatter.Builder.stereoReset(boolean)


ContextFirst: androidx.core.view.ViewConfigurationCompat#getScaledHorizontalScrollFactor(android.view.ViewConfiguration, android.content.Context) parameter #1:
    Context is distinct, so it must be the first argument (method `getScaledHorizontalScrollFactor`)
ContextFirst: androidx.core.view.ViewConfigurationCompat#getScaledVerticalScrollFactor(android.view.ViewConfiguration, android.content.Context) parameter #1:
    Context is distinct, so it must be the first argument (method `getScaledVerticalScrollFactor`)
ContextFirst: androidx.core.view.ViewConfigurationCompat#shouldShowMenuShortcutsWhenKeyboardPresent(android.view.ViewConfiguration, android.content.Context) parameter #1:
    Context is distinct, so it must be the first argument (method `shouldShowMenuShortcutsWhenKeyboardPresent`)


ExecutorRegistration: androidx.core.content.res.ResourcesCompat#getFont(android.content.Context, int, androidx.core.content.res.ResourcesCompat.FontCallback, android.os.Handler):
    Registration methods should have overload that accepts delivery Executor: `getFont`
ExecutorRegistration: androidx.core.os.HandlerCompat#createAsync(android.os.Looper, android.os.Handler.Callback):
    Registration methods should have overload that accepts delivery Executor: `createAsync`
ExecutorRegistration: androidx.core.provider.FontsContractCompat#requestFont(android.content.Context, androidx.core.provider.FontRequest, androidx.core.provider.FontsContractCompat.FontRequestCallback, android.os.Handler):
    Registration methods should have overload that accepts delivery Executor: `requestFont`


GetterOnBuilder: androidx.core.app.NotificationCompat.Action.Builder#getExtras():
    Getter should be on the built object, not the builder: method androidx.core.app.NotificationCompat.Action.Builder.getExtras()
GetterOnBuilder: androidx.core.app.NotificationCompat.Builder#getExtras():
    Getter should be on the built object, not the builder: method androidx.core.app.NotificationCompat.Builder.getExtras()
GetterOnBuilder: androidx.core.app.RemoteInput.Builder#getExtras():
    Getter should be on the built object, not the builder: method androidx.core.app.RemoteInput.Builder.getExtras()
GetterOnBuilder: androidx.core.app.ShareCompat.IntentBuilder#getIntent():
    Getter should be on the built object, not the builder: method androidx.core.app.ShareCompat.IntentBuilder.getIntent()


GetterSetterNames: androidx.core.app.NotificationCompat.Action.WearableExtender#getHintDisplayActionInline():
    Symmetric method for `setHintDisplayActionInline` must be named `isHintDisplayActionInline`; was `getHintDisplayActionInline`
GetterSetterNames: androidx.core.app.NotificationCompat.Action.WearableExtender#getHintLaunchesActivity():
    Symmetric method for `setHintLaunchesActivity` must be named `isHintLaunchesActivity`; was `getHintLaunchesActivity`
GetterSetterNames: androidx.core.app.NotificationCompat.WearableExtender#getContentIntentAvailableOffline():
    Symmetric method for `setContentIntentAvailableOffline` must be named `isContentIntentAvailableOffline`; was `getContentIntentAvailableOffline`
GetterSetterNames: androidx.core.app.NotificationCompat.WearableExtender#getHintContentIntentLaunchesActivity():
    Symmetric method for `setHintContentIntentLaunchesActivity` must be named `isHintContentIntentLaunchesActivity`; was `getHintContentIntentLaunchesActivity`
GetterSetterNames: androidx.core.app.NotificationCompat.WearableExtender#getStartScrollBottom():
    Symmetric method for `setStartScrollBottom` must be named `isStartScrollBottom`; was `getStartScrollBottom`
GetterSetterNames: androidx.core.graphics.drawable.RoundedBitmapDrawable#setAntiAlias(boolean):
    Symmetric method for `hasAntiAlias` must be named `setHasAntiAlias`; was `setAntiAlias`
GetterSetterNames: androidx.core.graphics.drawable.RoundedBitmapDrawable#setMipMap(boolean):
    Symmetric method for `hasMipMap` must be named `setHasMipMap`; was `setMipMap`
GetterSetterNames: androidx.core.view.GestureDetectorCompat#setIsLongpressEnabled(boolean):
    Symmetric method for `isLongpressEnabled` must be named `setLongpressEnabled`; was `setIsLongpressEnabled`


InvalidNullabilityOverride: androidx.core.content.FileProvider#attachInfo(android.content.Context, android.content.pm.ProviderInfo) parameter #0:
    Invalid nullability on parameter `context` in method `attachInfo`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.content.FileProvider#attachInfo(android.content.Context, android.content.pm.ProviderInfo) parameter #1:
    Invalid nullability on parameter `info` in method `attachInfo`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.content.FileProvider#insert(android.net.Uri, android.content.ContentValues) parameter #1:
    Invalid nullability on parameter `values` in method `insert`. Parameters of overrides cannot be NonNull if super parameter is Nullable.
InvalidNullabilityOverride: androidx.core.content.FileProvider#update(android.net.Uri, android.content.ContentValues, String, String[]) parameter #1:
    Invalid nullability on parameter `values` in method `update`. Parameters of overrides cannot be NonNull if super parameter is Nullable.
InvalidNullabilityOverride: androidx.core.location.LocationListenerCompat#onStatusChanged(String, int, android.os.Bundle) parameter #0:
    Invalid nullability on parameter `provider` in method `onStatusChanged`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#addView(android.view.View) parameter #0:
    Invalid nullability on parameter `child` in method `addView`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#measureChild(android.view.View, int, int) parameter #0:
    Invalid nullability on parameter `child` in method `measureChild`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onGenericMotionEvent(android.view.MotionEvent) parameter #0:
    Invalid nullability on parameter `motionEvent` in method `onGenericMotionEvent`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onInterceptTouchEvent(android.view.MotionEvent) parameter #0:
    Invalid nullability on parameter `ev` in method `onInterceptTouchEvent`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onNestedFling(android.view.View, float, float, boolean) parameter #0:
    Invalid nullability on parameter `target` in method `onNestedFling`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onNestedPreFling(android.view.View, float, float) parameter #0:
    Invalid nullability on parameter `target` in method `onNestedPreFling`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onNestedPreScroll(android.view.View, int, int, int[]) parameter #0:
    Invalid nullability on parameter `target` in method `onNestedPreScroll`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onNestedPreScroll(android.view.View, int, int, int[]) parameter #3:
    Invalid nullability on parameter `consumed` in method `onNestedPreScroll`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onNestedScroll(android.view.View, int, int, int, int) parameter #0:
    Invalid nullability on parameter `target` in method `onNestedScroll`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onNestedScrollAccepted(android.view.View, android.view.View, int) parameter #0:
    Invalid nullability on parameter `child` in method `onNestedScrollAccepted`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onNestedScrollAccepted(android.view.View, android.view.View, int) parameter #1:
    Invalid nullability on parameter `target` in method `onNestedScrollAccepted`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onStartNestedScroll(android.view.View, android.view.View, int) parameter #0:
    Invalid nullability on parameter `child` in method `onStartNestedScroll`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onStartNestedScroll(android.view.View, android.view.View, int) parameter #1:
    Invalid nullability on parameter `target` in method `onStartNestedScroll`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onStopNestedScroll(android.view.View) parameter #0:
    Invalid nullability on parameter `target` in method `onStopNestedScroll`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#onTouchEvent(android.view.MotionEvent) parameter #0:
    Invalid nullability on parameter `motionEvent` in method `onTouchEvent`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.
InvalidNullabilityOverride: androidx.core.widget.NestedScrollView#requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean) parameter #0:
    Invalid nullability on parameter `child` in method `requestChildRectangleOnScreen`. Parameters of overrides cannot be NonNull if the super parameter is unannotated.


KotlinOperator: androidx.core.os.LocaleListCompat#get(int):
    Method can be invoked with an indexing operator from Kotlin: `get` (this is usually desirable; just make sure it makes sense for this type of object)


ListenerInterface: androidx.core.view.OneShotPreDrawListener:
    Listeners should be an interface, or otherwise renamed Callback: OneShotPreDrawListener


ListenerLast: androidx.core.content.res.ResourcesCompat#getFont(android.content.Context, int, androidx.core.content.res.ResourcesCompat.FontCallback, android.os.Handler) parameter #3:
    Listeners should always be at end of argument list (method `getFont`)
ListenerLast: androidx.core.provider.FontsContractCompat#requestFont(android.content.Context, androidx.core.provider.FontRequest, androidx.core.provider.FontsContractCompat.FontRequestCallback, android.os.Handler) parameter #3:
    Listeners should always be at end of argument list (method `requestFont`)
ListenerLast: androidx.core.view.GestureDetectorCompat#GestureDetectorCompat(android.content.Context, android.view.GestureDetector.OnGestureListener, android.os.Handler) parameter #2:
    Listeners should always be at end of argument list (method `GestureDetectorCompat`)


MissingBuildMethod: androidx.core.app.ShareCompat.IntentBuilder:
    androidx.core.app.ShareCompat.IntentBuilder does not declare a `build()` method, but builder classes are expected to


MissingGetterMatchingBuilder: androidx.core.app.NotificationChannelCompat.Builder#setLightsEnabled(boolean):
    androidx.core.app.NotificationChannelCompat does not declare a `isLightsEnabled()` method matching method androidx.core.app.NotificationChannelCompat.Builder.setLightsEnabled(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationChannelCompat.Builder#setShowBadge(boolean):
    androidx.core.app.NotificationChannelCompat does not declare a `isShowBadge()` method matching method androidx.core.app.NotificationChannelCompat.Builder.setShowBadge(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationChannelCompat.Builder#setVibrationEnabled(boolean):
    androidx.core.app.NotificationChannelCompat does not declare a `isVibrationEnabled()` method matching method androidx.core.app.NotificationChannelCompat.Builder.setVibrationEnabled(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Action.Builder#setAllowGeneratedReplies(boolean):
    androidx.core.app.NotificationCompat.Action does not declare a `isAllowGeneratedReplies()` method matching method androidx.core.app.NotificationCompat.Action.Builder.setAllowGeneratedReplies(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Action.Builder#setShowsUserInterface(boolean):
    androidx.core.app.NotificationCompat.Action does not declare a `isShowsUserInterface()` method matching method androidx.core.app.NotificationCompat.Action.Builder.setShowsUserInterface(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.BubbleMetadata.Builder#setAutoExpandBubble(boolean):
    androidx.core.app.NotificationCompat.BubbleMetadata does not declare a `isAutoExpandBubble()` method matching method androidx.core.app.NotificationCompat.BubbleMetadata.Builder.setAutoExpandBubble(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.BubbleMetadata.Builder#setSuppressNotification(boolean):
    androidx.core.app.NotificationCompat.BubbleMetadata does not declare a `isSuppressNotification()` method matching method androidx.core.app.NotificationCompat.BubbleMetadata.Builder.setSuppressNotification(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#addAction(androidx.core.app.NotificationCompat.Action):
    android.app.Notification does not declare a `getActions()` method matching method androidx.core.app.NotificationCompat.Builder.addAction(androidx.core.app.NotificationCompat.Action)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#addAction(int, CharSequence, android.app.PendingIntent):
    android.app.Notification does not declare a `getActions()` method matching method androidx.core.app.NotificationCompat.Builder.addAction(int,CharSequence,android.app.PendingIntent)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#addExtras(android.os.Bundle):
    android.app.Notification does not declare a getter method matching method androidx.core.app.NotificationCompat.Builder.addExtras(android.os.Bundle) (expected one of: [getExtras(), getExtrases()])
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#addInvisibleAction(androidx.core.app.NotificationCompat.Action):
    android.app.Notification does not declare a `getInvisibleActions()` method matching method androidx.core.app.NotificationCompat.Builder.addInvisibleAction(androidx.core.app.NotificationCompat.Action)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#addInvisibleAction(int, CharSequence, android.app.PendingIntent):
    android.app.Notification does not declare a `getInvisibleActions()` method matching method androidx.core.app.NotificationCompat.Builder.addInvisibleAction(int,CharSequence,android.app.PendingIntent)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#addPerson(androidx.core.app.Person):
    android.app.Notification does not declare a `getPersons()` method matching method androidx.core.app.NotificationCompat.Builder.addPerson(androidx.core.app.Person)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setAllowSystemGeneratedContextualActions(boolean):
    android.app.Notification does not declare a `isAllowSystemGeneratedContextualActions()` method matching method androidx.core.app.NotificationCompat.Builder.setAllowSystemGeneratedContextualActions(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setAutoCancel(boolean):
    android.app.Notification does not declare a `isAutoCancel()` method matching method androidx.core.app.NotificationCompat.Builder.setAutoCancel(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setCategory(String):
    android.app.Notification does not declare a `getCategory()` method matching method androidx.core.app.NotificationCompat.Builder.setCategory(String)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setChronometerCountDown(boolean):
    android.app.Notification does not declare a `isChronometerCountDown()` method matching method androidx.core.app.NotificationCompat.Builder.setChronometerCountDown(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setColor(int):
    android.app.Notification does not declare a `getColor()` method matching method androidx.core.app.NotificationCompat.Builder.setColor(int)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setColorized(boolean):
    android.app.Notification does not declare a `isColorized()` method matching method androidx.core.app.NotificationCompat.Builder.setColorized(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setContent(android.widget.RemoteViews):
    android.app.Notification does not declare a `getContent()` method matching method androidx.core.app.NotificationCompat.Builder.setContent(android.widget.RemoteViews)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setContentInfo(CharSequence):
    android.app.Notification does not declare a `getContentInfo()` method matching method androidx.core.app.NotificationCompat.Builder.setContentInfo(CharSequence)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setContentIntent(android.app.PendingIntent):
    android.app.Notification does not declare a `getContentIntent()` method matching method androidx.core.app.NotificationCompat.Builder.setContentIntent(android.app.PendingIntent)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setContentText(CharSequence):
    android.app.Notification does not declare a `getContentText()` method matching method androidx.core.app.NotificationCompat.Builder.setContentText(CharSequence)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setContentTitle(CharSequence):
    android.app.Notification does not declare a `getContentTitle()` method matching method androidx.core.app.NotificationCompat.Builder.setContentTitle(CharSequence)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setCustomBigContentView(android.widget.RemoteViews):
    android.app.Notification does not declare a `getCustomBigContentView()` method matching method androidx.core.app.NotificationCompat.Builder.setCustomBigContentView(android.widget.RemoteViews)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setCustomContentView(android.widget.RemoteViews):
    android.app.Notification does not declare a `getCustomContentView()` method matching method androidx.core.app.NotificationCompat.Builder.setCustomContentView(android.widget.RemoteViews)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setCustomHeadsUpContentView(android.widget.RemoteViews):
    android.app.Notification does not declare a `getCustomHeadsUpContentView()` method matching method androidx.core.app.NotificationCompat.Builder.setCustomHeadsUpContentView(android.widget.RemoteViews)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setDefaults(int):
    android.app.Notification does not declare a `getDefaults()` method matching method androidx.core.app.NotificationCompat.Builder.setDefaults(int)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setDeleteIntent(android.app.PendingIntent):
    android.app.Notification does not declare a `getDeleteIntent()` method matching method androidx.core.app.NotificationCompat.Builder.setDeleteIntent(android.app.PendingIntent)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setExtras(android.os.Bundle):
    android.app.Notification does not declare a `getExtras()` method matching method androidx.core.app.NotificationCompat.Builder.setExtras(android.os.Bundle)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setFullScreenIntent(android.app.PendingIntent, boolean):
    android.app.Notification does not declare a `getFullScreenIntent()` method matching method androidx.core.app.NotificationCompat.Builder.setFullScreenIntent(android.app.PendingIntent,boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setGroupSummary(boolean):
    android.app.Notification does not declare a `isGroupSummary()` method matching method androidx.core.app.NotificationCompat.Builder.setGroupSummary(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setLights(int, int, int):
    android.app.Notification does not declare a `getLights()` method matching method androidx.core.app.NotificationCompat.Builder.setLights(int,int,int)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setLocalOnly(boolean):
    android.app.Notification does not declare a `isLocalOnly()` method matching method androidx.core.app.NotificationCompat.Builder.setLocalOnly(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setNumber(int):
    android.app.Notification does not declare a `getNumber()` method matching method androidx.core.app.NotificationCompat.Builder.setNumber(int)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setOngoing(boolean):
    android.app.Notification does not declare a `isOngoing()` method matching method androidx.core.app.NotificationCompat.Builder.setOngoing(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setOnlyAlertOnce(boolean):
    android.app.Notification does not declare a `isOnlyAlertOnce()` method matching method androidx.core.app.NotificationCompat.Builder.setOnlyAlertOnce(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setPriority(int):
    android.app.Notification does not declare a `getPriority()` method matching method androidx.core.app.NotificationCompat.Builder.setPriority(int)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setProgress(int, int, boolean):
    android.app.Notification does not declare a `getProgress()` method matching method androidx.core.app.NotificationCompat.Builder.setProgress(int,int,boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setPublicVersion(android.app.Notification):
    android.app.Notification does not declare a `getPublicVersion()` method matching method androidx.core.app.NotificationCompat.Builder.setPublicVersion(android.app.Notification)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setRemoteInputHistory(CharSequence[]):
    android.app.Notification does not declare a `getRemoteInputHistory()` method matching method androidx.core.app.NotificationCompat.Builder.setRemoteInputHistory(CharSequence[])
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setShortcutInfo(androidx.core.content.pm.ShortcutInfoCompat):
    android.app.Notification does not declare a `getShortcutInfo()` method matching method androidx.core.app.NotificationCompat.Builder.setShortcutInfo(androidx.core.content.pm.ShortcutInfoCompat)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setShowWhen(boolean):
    android.app.Notification does not declare a `isShowWhen()` method matching method androidx.core.app.NotificationCompat.Builder.setShowWhen(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setSilent(boolean):
    android.app.Notification does not declare a `isSilent()` method matching method androidx.core.app.NotificationCompat.Builder.setSilent(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setSound(android.net.Uri):
    android.app.Notification does not declare a `getSound()` method matching method androidx.core.app.NotificationCompat.Builder.setSound(android.net.Uri)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setSound(android.net.Uri, int):
    android.app.Notification does not declare a `getSound()` method matching method androidx.core.app.NotificationCompat.Builder.setSound(android.net.Uri,int)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setStyle(androidx.core.app.NotificationCompat.Style):
    android.app.Notification does not declare a `getStyle()` method matching method androidx.core.app.NotificationCompat.Builder.setStyle(androidx.core.app.NotificationCompat.Style)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setSubText(CharSequence):
    android.app.Notification does not declare a `getSubText()` method matching method androidx.core.app.NotificationCompat.Builder.setSubText(CharSequence)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setTicker(CharSequence):
    android.app.Notification does not declare a `getTicker()` method matching method androidx.core.app.NotificationCompat.Builder.setTicker(CharSequence)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setUsesChronometer(boolean):
    android.app.Notification does not declare a `isUsesChronometer()` method matching method androidx.core.app.NotificationCompat.Builder.setUsesChronometer(boolean)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setVibrate(long[]):
    android.app.Notification does not declare a `getVibrate()` method matching method androidx.core.app.NotificationCompat.Builder.setVibrate(long[])
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setVisibility(int):
    android.app.Notification does not declare a `getVisibility()` method matching method androidx.core.app.NotificationCompat.Builder.setVisibility(int)
MissingGetterMatchingBuilder: androidx.core.app.NotificationCompat.Builder#setWhen(long):
    android.app.Notification does not declare a `getWhen()` method matching method androidx.core.app.NotificationCompat.Builder.setWhen(long)
MissingGetterMatchingBuilder: androidx.core.app.RemoteInput.Builder#setAllowDataType(String, boolean):
    androidx.core.app.RemoteInput does not declare a `getAllowDataType()` method matching method androidx.core.app.RemoteInput.Builder.setAllowDataType(String,boolean)
MissingGetterMatchingBuilder: androidx.core.app.RemoteInput.Builder#setAllowFreeFormInput(boolean):
    androidx.core.app.RemoteInput does not declare a `isAllowFreeFormInput()` method matching method androidx.core.app.RemoteInput.Builder.setAllowFreeFormInput(boolean)
MissingGetterMatchingBuilder: androidx.core.content.pm.ShortcutInfoCompat.Builder#setAlwaysBadged():
    androidx.core.content.pm.ShortcutInfoCompat does not declare a `getAlwaysBadged()` method matching method androidx.core.content.pm.ShortcutInfoCompat.Builder.setAlwaysBadged()
MissingGetterMatchingBuilder: androidx.core.content.pm.ShortcutInfoCompat.Builder#setIcon(androidx.core.graphics.drawable.IconCompat):
    androidx.core.content.pm.ShortcutInfoCompat does not declare a `getIcon()` method matching method androidx.core.content.pm.ShortcutInfoCompat.Builder.setIcon(androidx.core.graphics.drawable.IconCompat)
MissingGetterMatchingBuilder: androidx.core.content.pm.ShortcutInfoCompat.Builder#setIsConversation():
    androidx.core.content.pm.ShortcutInfoCompat does not declare a `getIsConversation()` method matching method androidx.core.content.pm.ShortcutInfoCompat.Builder.setIsConversation()
MissingGetterMatchingBuilder: androidx.core.content.pm.ShortcutInfoCompat.Builder#setLongLived(boolean):
    androidx.core.content.pm.ShortcutInfoCompat does not declare a `isLongLived()` method matching method androidx.core.content.pm.ShortcutInfoCompat.Builder.setLongLived(boolean)
MissingGetterMatchingBuilder: androidx.core.content.pm.ShortcutInfoCompat.Builder#setPerson(androidx.core.app.Person):
    androidx.core.content.pm.ShortcutInfoCompat does not declare a `getPerson()` method matching method androidx.core.content.pm.ShortcutInfoCompat.Builder.setPerson(androidx.core.app.Person)
MissingGetterMatchingBuilder: androidx.core.content.pm.ShortcutInfoCompat.Builder#setPersons(androidx.core.app.Person[]):
    androidx.core.content.pm.ShortcutInfoCompat does not declare a `getPersons()` method matching method androidx.core.content.pm.ShortcutInfoCompat.Builder.setPersons(androidx.core.app.Person[])
MissingGetterMatchingBuilder: androidx.core.text.BidiFormatter.Builder#setTextDirectionHeuristic(androidx.core.text.TextDirectionHeuristicCompat):
    androidx.core.text.BidiFormatter does not declare a `getTextDirectionHeuristic()` method matching method androidx.core.text.BidiFormatter.Builder.setTextDirectionHeuristic(androidx.core.text.TextDirectionHeuristicCompat)
MissingGetterMatchingBuilder: androidx.core.view.WindowInsetsCompat.Builder#setVisible(int, boolean):
    androidx.core.view.WindowInsetsCompat does not declare a `getVisible()` method matching method androidx.core.view.WindowInsetsCompat.Builder.setVisible(int,boolean)


MissingNullability: androidx.core.app.NotificationCompat.Action#title:
    Missing nullability on field `title` in class `class androidx.core.app.NotificationCompat.Action`
MissingNullability: androidx.core.app.NotificationCompatSideChannelService#cancel(String, int, String) parameter #0:
    Missing nullability on parameter `packageName` in method `cancel`
MissingNullability: androidx.core.app.NotificationCompatSideChannelService#cancel(String, int, String) parameter #2:
    Missing nullability on parameter `tag` in method `cancel`
MissingNullability: androidx.core.app.NotificationCompatSideChannelService#cancelAll(String) parameter #0:
    Missing nullability on parameter `packageName` in method `cancelAll`
MissingNullability: androidx.core.app.NotificationCompatSideChannelService#notify(String, int, String, android.app.Notification) parameter #0:
    Missing nullability on parameter `packageName` in method `notify`
MissingNullability: androidx.core.app.NotificationCompatSideChannelService#notify(String, int, String, android.app.Notification) parameter #2:
    Missing nullability on parameter `tag` in method `notify`
MissingNullability: androidx.core.app.NotificationCompatSideChannelService#notify(String, int, String, android.app.Notification) parameter #3:
    Missing nullability on parameter `notification` in method `notify`
MissingNullability: androidx.core.app.NotificationCompatSideChannelService#onBind(android.content.Intent):
    Missing nullability on method `onBind` return
MissingNullability: androidx.core.app.NotificationCompatSideChannelService#onBind(android.content.Intent) parameter #0:
    Missing nullability on parameter `intent` in method `onBind`
MissingNullability: androidx.core.app.SharedElementCallback#onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix, android.graphics.RectF):
    Missing nullability on method `onCaptureSharedElementSnapshot` return
MissingNullability: androidx.core.app.SharedElementCallback#onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix, android.graphics.RectF) parameter #0:
    Missing nullability on parameter `sharedElement` in method `onCaptureSharedElementSnapshot`
MissingNullability: androidx.core.app.SharedElementCallback#onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix, android.graphics.RectF) parameter #1:
    Missing nullability on parameter `viewToGlobalMatrix` in method `onCaptureSharedElementSnapshot`
MissingNullability: androidx.core.app.SharedElementCallback#onCaptureSharedElementSnapshot(android.view.View, android.graphics.Matrix, android.graphics.RectF) parameter #2:
    Missing nullability on parameter `screenBounds` in method `onCaptureSharedElementSnapshot`
MissingNullability: androidx.core.app.SharedElementCallback#onCreateSnapshotView(android.content.Context, android.os.Parcelable):
    Missing nullability on method `onCreateSnapshotView` return
MissingNullability: androidx.core.app.SharedElementCallback#onCreateSnapshotView(android.content.Context, android.os.Parcelable) parameter #0:
    Missing nullability on parameter `context` in method `onCreateSnapshotView`
MissingNullability: androidx.core.app.SharedElementCallback#onCreateSnapshotView(android.content.Context, android.os.Parcelable) parameter #1:
    Missing nullability on parameter `snapshot` in method `onCreateSnapshotView`
MissingNullability: androidx.core.app.SharedElementCallback#onMapSharedElements(java.util.List<java.lang.String>, java.util.Map<java.lang.String,android.view.View>) parameter #0:
    Missing nullability on parameter `names` in method `onMapSharedElements`
MissingNullability: androidx.core.app.SharedElementCallback#onMapSharedElements(java.util.List<java.lang.String>, java.util.Map<java.lang.String,android.view.View>) parameter #1:
    Missing nullability on parameter `sharedElements` in method `onMapSharedElements`
MissingNullability: androidx.core.app.SharedElementCallback#onRejectSharedElements(java.util.List<android.view.View>) parameter #0:
    Missing nullability on parameter `rejectedSharedElements` in method `onRejectSharedElements`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementEnd(java.util.List<java.lang.String>, java.util.List<android.view.View>, java.util.List<android.view.View>) parameter #0:
    Missing nullability on parameter `sharedElementNames` in method `onSharedElementEnd`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementEnd(java.util.List<java.lang.String>, java.util.List<android.view.View>, java.util.List<android.view.View>) parameter #1:
    Missing nullability on parameter `sharedElements` in method `onSharedElementEnd`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementEnd(java.util.List<java.lang.String>, java.util.List<android.view.View>, java.util.List<android.view.View>) parameter #2:
    Missing nullability on parameter `sharedElementSnapshots` in method `onSharedElementEnd`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementStart(java.util.List<java.lang.String>, java.util.List<android.view.View>, java.util.List<android.view.View>) parameter #0:
    Missing nullability on parameter `sharedElementNames` in method `onSharedElementStart`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementStart(java.util.List<java.lang.String>, java.util.List<android.view.View>, java.util.List<android.view.View>) parameter #1:
    Missing nullability on parameter `sharedElements` in method `onSharedElementStart`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementStart(java.util.List<java.lang.String>, java.util.List<android.view.View>, java.util.List<android.view.View>) parameter #2:
    Missing nullability on parameter `sharedElementSnapshots` in method `onSharedElementStart`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementsArrived(java.util.List<java.lang.String>, java.util.List<android.view.View>, androidx.core.app.SharedElementCallback.OnSharedElementsReadyListener) parameter #0:
    Missing nullability on parameter `sharedElementNames` in method `onSharedElementsArrived`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementsArrived(java.util.List<java.lang.String>, java.util.List<android.view.View>, androidx.core.app.SharedElementCallback.OnSharedElementsReadyListener) parameter #1:
    Missing nullability on parameter `sharedElements` in method `onSharedElementsArrived`
MissingNullability: androidx.core.app.SharedElementCallback#onSharedElementsArrived(java.util.List<java.lang.String>, java.util.List<android.view.View>, androidx.core.app.SharedElementCallback.OnSharedElementsReadyListener) parameter #2:
    Missing nullability on parameter `listener` in method `onSharedElementsArrived`
MissingNullability: androidx.core.content.FileProvider#getUriForFile(android.content.Context, String, java.io.File):
    Missing nullability on method `getUriForFile` return
MissingNullability: androidx.core.content.FileProvider#insert(android.net.Uri, android.content.ContentValues):
    Missing nullability on method `insert` return
MissingNullability: androidx.core.content.FileProvider#openFile(android.net.Uri, String):
    Missing nullability on method `openFile` return
MissingNullability: androidx.core.content.pm.ShortcutInfoCompat#toShortcutInfo():
    Missing nullability on method `toShortcutInfo` return
MissingNullability: androidx.core.content.pm.ShortcutInfoCompat.Builder#setIcon(androidx.core.graphics.drawable.IconCompat) parameter #0:
    Missing nullability on parameter `icon` in method `setIcon`
MissingNullability: androidx.core.graphics.drawable.RoundedBitmapDrawable#getColorFilter():
    Missing nullability on method `getColorFilter` return
MissingNullability: androidx.core.graphics.drawable.RoundedBitmapDrawable#setColorFilter(android.graphics.ColorFilter) parameter #0:
    Missing nullability on parameter `cf` in method `setColorFilter`
MissingNullability: androidx.core.provider.FontsContractCompat.FontFamilyResult#getFonts():
    Missing nullability on method `getFonts` return
MissingNullability: androidx.core.provider.FontsContractCompat.FontRequestCallback#onTypefaceRetrieved(android.graphics.Typeface) parameter #0:
    Missing nullability on parameter `typeface` in method `onTypefaceRetrieved`
MissingNullability: androidx.core.text.BidiFormatter#getInstance():
    Missing nullability on method `getInstance` return
MissingNullability: androidx.core.text.BidiFormatter#getInstance(boolean):
    Missing nullability on method `getInstance` return
MissingNullability: androidx.core.text.BidiFormatter#getInstance(java.util.Locale):
    Missing nullability on method `getInstance` return
MissingNullability: androidx.core.text.BidiFormatter#getInstance(java.util.Locale) parameter #0:
    Missing nullability on parameter `locale` in method `getInstance`
MissingNullability: androidx.core.text.BidiFormatter#isRtl(CharSequence) parameter #0:
    Missing nullability on parameter `str` in method `isRtl`
MissingNullability: androidx.core.text.BidiFormatter#isRtl(String) parameter #0:
    Missing nullability on parameter `str` in method `isRtl`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence):
    Missing nullability on method `unicodeWrap` return
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence) parameter #0:
    Missing nullability on parameter `str` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence, androidx.core.text.TextDirectionHeuristicCompat):
    Missing nullability on method `unicodeWrap` return
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence, androidx.core.text.TextDirectionHeuristicCompat) parameter #0:
    Missing nullability on parameter `str` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence, androidx.core.text.TextDirectionHeuristicCompat) parameter #1:
    Missing nullability on parameter `heuristic` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence, androidx.core.text.TextDirectionHeuristicCompat, boolean):
    Missing nullability on method `unicodeWrap` return
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence, androidx.core.text.TextDirectionHeuristicCompat, boolean) parameter #0:
    Missing nullability on parameter `str` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence, androidx.core.text.TextDirectionHeuristicCompat, boolean) parameter #1:
    Missing nullability on parameter `heuristic` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence, boolean):
    Missing nullability on method `unicodeWrap` return
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(CharSequence, boolean) parameter #0:
    Missing nullability on parameter `str` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String):
    Missing nullability on method `unicodeWrap` return
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String) parameter #0:
    Missing nullability on parameter `str` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String, androidx.core.text.TextDirectionHeuristicCompat):
    Missing nullability on method `unicodeWrap` return
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String, androidx.core.text.TextDirectionHeuristicCompat) parameter #0:
    Missing nullability on parameter `str` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String, androidx.core.text.TextDirectionHeuristicCompat) parameter #1:
    Missing nullability on parameter `heuristic` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String, androidx.core.text.TextDirectionHeuristicCompat, boolean):
    Missing nullability on method `unicodeWrap` return
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String, androidx.core.text.TextDirectionHeuristicCompat, boolean) parameter #0:
    Missing nullability on parameter `str` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String, androidx.core.text.TextDirectionHeuristicCompat, boolean) parameter #1:
    Missing nullability on parameter `heuristic` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String, boolean):
    Missing nullability on method `unicodeWrap` return
MissingNullability: androidx.core.text.BidiFormatter#unicodeWrap(String, boolean) parameter #0:
    Missing nullability on parameter `str` in method `unicodeWrap`
MissingNullability: androidx.core.text.BidiFormatter.Builder#Builder(java.util.Locale) parameter #0:
    Missing nullability on parameter `locale` in method `Builder`
MissingNullability: androidx.core.text.BidiFormatter.Builder#build():
    Missing nullability on method `build` return
MissingNullability: androidx.core.text.BidiFormatter.Builder#setTextDirectionHeuristic(androidx.core.text.TextDirectionHeuristicCompat):
    Missing nullability on method `setTextDirectionHeuristic` return
MissingNullability: androidx.core.text.BidiFormatter.Builder#setTextDirectionHeuristic(androidx.core.text.TextDirectionHeuristicCompat) parameter #0:
    Missing nullability on parameter `heuristic` in method `setTextDirectionHeuristic`
MissingNullability: androidx.core.text.BidiFormatter.Builder#stereoReset(boolean):
    Missing nullability on method `stereoReset` return
MissingNullability: androidx.core.text.PrecomputedTextCompat#create(CharSequence, androidx.core.text.PrecomputedTextCompat.Params):
    Missing nullability on method `create` return
MissingNullability: androidx.core.text.PrecomputedTextCompat#getSpanEnd(Object) parameter #0:
    Missing nullability on parameter `tag` in method `getSpanEnd`
MissingNullability: androidx.core.text.PrecomputedTextCompat#getSpanFlags(Object) parameter #0:
    Missing nullability on parameter `tag` in method `getSpanFlags`
MissingNullability: androidx.core.text.PrecomputedTextCompat#getSpanStart(Object) parameter #0:
    Missing nullability on parameter `tag` in method `getSpanStart`
MissingNullability: androidx.core.text.PrecomputedTextCompat#getSpans(int, int, Class<T>):
    Missing nullability on method `getSpans` return
MissingNullability: androidx.core.text.PrecomputedTextCompat#getSpans(int, int, Class<T>) parameter #2:
    Missing nullability on parameter `type` in method `getSpans`
MissingNullability: androidx.core.text.PrecomputedTextCompat#getTextFuture(CharSequence, androidx.core.text.PrecomputedTextCompat.Params, java.util.concurrent.Executor):
    Missing nullability on method `getTextFuture` return
MissingNullability: androidx.core.text.PrecomputedTextCompat#nextSpanTransition(int, int, Class) parameter #2:
    Missing nullability on parameter `type` in method `nextSpanTransition`
MissingNullability: androidx.core.text.PrecomputedTextCompat#removeSpan(Object) parameter #0:
    Missing nullability on parameter `what` in method `removeSpan`
MissingNullability: androidx.core.text.PrecomputedTextCompat#setSpan(Object, int, int, int) parameter #0:
    Missing nullability on parameter `what` in method `setSpan`
MissingNullability: androidx.core.text.PrecomputedTextCompat#subSequence(int, int):
    Missing nullability on method `subSequence` return
MissingNullability: androidx.core.text.PrecomputedTextCompat.Params.Builder#setBreakStrategy(int):
    Missing nullability on method `setBreakStrategy` return
MissingNullability: androidx.core.text.PrecomputedTextCompat.Params.Builder#setHyphenationFrequency(int):
    Missing nullability on method `setHyphenationFrequency` return
MissingNullability: androidx.core.text.PrecomputedTextCompat.Params.Builder#setTextDirection(android.text.TextDirectionHeuristic):
    Missing nullability on method `setTextDirection` return
MissingNullability: androidx.core.text.TextDirectionHeuristicCompat#isRtl(CharSequence, int, int) parameter #0:
    Missing nullability on parameter `cs` in method `isRtl`
MissingNullability: androidx.core.text.TextDirectionHeuristicCompat#isRtl(char[], int, int) parameter #0:
    Missing nullability on parameter `array` in method `isRtl`
MissingNullability: androidx.core.text.TextDirectionHeuristicsCompat#ANYRTL_LTR:
    Missing nullability on field `ANYRTL_LTR` in class `class androidx.core.text.TextDirectionHeuristicsCompat`
MissingNullability: androidx.core.text.TextDirectionHeuristicsCompat#FIRSTSTRONG_LTR:
    Missing nullability on field `FIRSTSTRONG_LTR` in class `class androidx.core.text.TextDirectionHeuristicsCompat`
MissingNullability: androidx.core.text.TextDirectionHeuristicsCompat#FIRSTSTRONG_RTL:
    Missing nullability on field `FIRSTSTRONG_RTL` in class `class androidx.core.text.TextDirectionHeuristicsCompat`
MissingNullability: androidx.core.text.TextDirectionHeuristicsCompat#LOCALE:
    Missing nullability on field `LOCALE` in class `class androidx.core.text.TextDirectionHeuristicsCompat`
MissingNullability: androidx.core.text.TextDirectionHeuristicsCompat#LTR:
    Missing nullability on field `LTR` in class `class androidx.core.text.TextDirectionHeuristicsCompat`
MissingNullability: androidx.core.text.TextDirectionHeuristicsCompat#RTL:
    Missing nullability on field `RTL` in class `class androidx.core.text.TextDirectionHeuristicsCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#addAction(androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat) parameter #0:
    Missing nullability on parameter `action` in method `addAction`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#addChild(android.view.View) parameter #0:
    Missing nullability on parameter `child` in method `addChild`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#addChild(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `addChild`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#findAccessibilityNodeInfosByText(String):
    Missing nullability on method `findAccessibilityNodeInfosByText` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#findAccessibilityNodeInfosByText(String) parameter #0:
    Missing nullability on parameter `text` in method `findAccessibilityNodeInfosByText`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#findAccessibilityNodeInfosByViewId(String):
    Missing nullability on method `findAccessibilityNodeInfosByViewId` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#findAccessibilityNodeInfosByViewId(String) parameter #0:
    Missing nullability on parameter `viewId` in method `findAccessibilityNodeInfosByViewId`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#findFocus(int):
    Missing nullability on method `findFocus` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#focusSearch(int):
    Missing nullability on method `focusSearch` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getActionList():
    Missing nullability on method `getActionList` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getBoundsInScreen(android.graphics.Rect) parameter #0:
    Missing nullability on parameter `outBounds` in method `getBoundsInScreen`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getChild(int):
    Missing nullability on method `getChild` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getClassName():
    Missing nullability on method `getClassName` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getCollectionInfo():
    Missing nullability on method `getCollectionInfo` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getCollectionItemInfo():
    Missing nullability on method `getCollectionItemInfo` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getContentDescription():
    Missing nullability on method `getContentDescription` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getError():
    Missing nullability on method `getError` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getExtras():
    Missing nullability on method `getExtras` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getLabelFor():
    Missing nullability on method `getLabelFor` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getLabeledBy():
    Missing nullability on method `getLabeledBy` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getPackageName():
    Missing nullability on method `getPackageName` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getParent():
    Missing nullability on method `getParent` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getRangeInfo():
    Missing nullability on method `getRangeInfo` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getText():
    Missing nullability on method `getText` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getTraversalAfter():
    Missing nullability on method `getTraversalAfter` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getTraversalBefore():
    Missing nullability on method `getTraversalBefore` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getViewIdResourceName():
    Missing nullability on method `getViewIdResourceName` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#getWindow():
    Missing nullability on method `getWindow` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#obtain():
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#obtain(android.view.View):
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#obtain(android.view.View) parameter #0:
    Missing nullability on parameter `source` in method `obtain`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#obtain(android.view.View, int):
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#obtain(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `obtain`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#obtain(androidx.core.view.accessibility.AccessibilityNodeInfoCompat):
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#obtain(androidx.core.view.accessibility.AccessibilityNodeInfoCompat) parameter #0:
    Missing nullability on parameter `info` in method `obtain`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#performAction(int, android.os.Bundle) parameter #1:
    Missing nullability on parameter `arguments` in method `performAction`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#removeAction(androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat) parameter #0:
    Missing nullability on parameter `action` in method `removeAction`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#removeChild(android.view.View) parameter #0:
    Missing nullability on parameter `child` in method `removeChild`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#removeChild(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `removeChild`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setBoundsInScreen(android.graphics.Rect) parameter #0:
    Missing nullability on parameter `bounds` in method `setBoundsInScreen`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setClassName(CharSequence) parameter #0:
    Missing nullability on parameter `className` in method `setClassName`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setCollectionInfo(Object) parameter #0:
    Missing nullability on parameter `collectionInfo` in method `setCollectionInfo`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setCollectionItemInfo(Object) parameter #0:
    Missing nullability on parameter `collectionItemInfo` in method `setCollectionItemInfo`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setContentDescription(CharSequence) parameter #0:
    Missing nullability on parameter `contentDescription` in method `setContentDescription`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setError(CharSequence) parameter #0:
    Missing nullability on parameter `error` in method `setError`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setLabelFor(android.view.View) parameter #0:
    Missing nullability on parameter `labeled` in method `setLabelFor`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setLabelFor(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `setLabelFor`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setLabeledBy(android.view.View) parameter #0:
    Missing nullability on parameter `label` in method `setLabeledBy`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setLabeledBy(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `setLabeledBy`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setPackageName(CharSequence) parameter #0:
    Missing nullability on parameter `packageName` in method `setPackageName`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setParent(android.view.View) parameter #0:
    Missing nullability on parameter `parent` in method `setParent`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setParent(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `setParent`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setRangeInfo(androidx.core.view.accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat) parameter #0:
    Missing nullability on parameter `rangeInfo` in method `setRangeInfo`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setSource(android.view.View) parameter #0:
    Missing nullability on parameter `source` in method `setSource`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setSource(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `setSource`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setText(CharSequence) parameter #0:
    Missing nullability on parameter `text` in method `setText`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setTraversalAfter(android.view.View) parameter #0:
    Missing nullability on parameter `view` in method `setTraversalAfter`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setTraversalAfter(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `setTraversalAfter`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setTraversalBefore(android.view.View) parameter #0:
    Missing nullability on parameter `view` in method `setTraversalBefore`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setTraversalBefore(android.view.View, int) parameter #0:
    Missing nullability on parameter `root` in method `setTraversalBefore`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#setViewIdResourceName(String) parameter #0:
    Missing nullability on parameter `viewId` in method `setViewIdResourceName`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#unwrap():
    Missing nullability on method `unwrap` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat#wrap(android.view.accessibility.AccessibilityNodeInfo):
    Missing nullability on method `wrap` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_ACCESSIBILITY_FOCUS:
    Missing nullability on field `ACTION_ACCESSIBILITY_FOCUS` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_CLEAR_ACCESSIBILITY_FOCUS:
    Missing nullability on field `ACTION_CLEAR_ACCESSIBILITY_FOCUS` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_CLEAR_FOCUS:
    Missing nullability on field `ACTION_CLEAR_FOCUS` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_CLEAR_SELECTION:
    Missing nullability on field `ACTION_CLEAR_SELECTION` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_CLICK:
    Missing nullability on field `ACTION_CLICK` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_COLLAPSE:
    Missing nullability on field `ACTION_COLLAPSE` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_CONTEXT_CLICK:
    Missing nullability on field `ACTION_CONTEXT_CLICK` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_COPY:
    Missing nullability on field `ACTION_COPY` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_CUT:
    Missing nullability on field `ACTION_CUT` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_DISMISS:
    Missing nullability on field `ACTION_DISMISS` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_EXPAND:
    Missing nullability on field `ACTION_EXPAND` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_FOCUS:
    Missing nullability on field `ACTION_FOCUS` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_HIDE_TOOLTIP:
    Missing nullability on field `ACTION_HIDE_TOOLTIP` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_LONG_CLICK:
    Missing nullability on field `ACTION_LONG_CLICK` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_MOVE_WINDOW:
    Missing nullability on field `ACTION_MOVE_WINDOW` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
    Missing nullability on field `ACTION_NEXT_AT_MOVEMENT_GRANULARITY` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_NEXT_HTML_ELEMENT:
    Missing nullability on field `ACTION_NEXT_HTML_ELEMENT` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_PASTE:
    Missing nullability on field `ACTION_PASTE` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
    Missing nullability on field `ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_PREVIOUS_HTML_ELEMENT:
    Missing nullability on field `ACTION_PREVIOUS_HTML_ELEMENT` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SCROLL_BACKWARD:
    Missing nullability on field `ACTION_SCROLL_BACKWARD` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SCROLL_DOWN:
    Missing nullability on field `ACTION_SCROLL_DOWN` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SCROLL_FORWARD:
    Missing nullability on field `ACTION_SCROLL_FORWARD` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SCROLL_LEFT:
    Missing nullability on field `ACTION_SCROLL_LEFT` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SCROLL_RIGHT:
    Missing nullability on field `ACTION_SCROLL_RIGHT` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SCROLL_TO_POSITION:
    Missing nullability on field `ACTION_SCROLL_TO_POSITION` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SCROLL_UP:
    Missing nullability on field `ACTION_SCROLL_UP` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SELECT:
    Missing nullability on field `ACTION_SELECT` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SET_PROGRESS:
    Missing nullability on field `ACTION_SET_PROGRESS` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SET_SELECTION:
    Missing nullability on field `ACTION_SET_SELECTION` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SET_TEXT:
    Missing nullability on field `ACTION_SET_TEXT` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SHOW_ON_SCREEN:
    Missing nullability on field `ACTION_SHOW_ON_SCREEN` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#ACTION_SHOW_TOOLTIP:
    Missing nullability on field `ACTION_SHOW_TOOLTIP` in class `class androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#AccessibilityActionCompat(int, CharSequence) parameter #1:
    Missing nullability on parameter `label` in method `AccessibilityActionCompat`
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.AccessibilityActionCompat#getLabel():
    Missing nullability on method `getLabel` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat#obtain(int, int, boolean):
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionInfoCompat#obtain(int, int, boolean, int):
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat#obtain(int, int, int, int, boolean):
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.CollectionItemInfoCompat#obtain(int, int, int, int, boolean, boolean):
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.view.accessibility.AccessibilityNodeInfoCompat.RangeInfoCompat#obtain(int, float, float, float):
    Missing nullability on method `obtain` return
MissingNullability: androidx.core.widget.AutoScrollHelper#onTouch(android.view.View, android.view.MotionEvent) parameter #0:
    Missing nullability on parameter `v` in method `onTouch`
MissingNullability: androidx.core.widget.AutoScrollHelper#onTouch(android.view.View, android.view.MotionEvent) parameter #1:
    Missing nullability on parameter `event` in method `onTouch`
MissingNullability: androidx.core.widget.AutoScrollHelper#setEnabled(boolean):
    Missing nullability on method `setEnabled` return
MissingNullability: androidx.core.widget.AutoScrollHelper#setExclusive(boolean):
    Missing nullability on method `setExclusive` return
MissingNullability: androidx.core.widget.NestedScrollView#addView(android.view.View, android.view.ViewGroup.LayoutParams) parameter #0:
    Missing nullability on parameter `child` in method `addView`
MissingNullability: androidx.core.widget.NestedScrollView#addView(android.view.View, android.view.ViewGroup.LayoutParams) parameter #1:
    Missing nullability on parameter `params` in method `addView`
MissingNullability: androidx.core.widget.NestedScrollView#addView(android.view.View, int) parameter #0:
    Missing nullability on parameter `child` in method `addView`
MissingNullability: androidx.core.widget.NestedScrollView#addView(android.view.View, int, android.view.ViewGroup.LayoutParams) parameter #0:
    Missing nullability on parameter `child` in method `addView`
MissingNullability: androidx.core.widget.NestedScrollView#addView(android.view.View, int, android.view.ViewGroup.LayoutParams) parameter #2:
    Missing nullability on parameter `params` in method `addView`
MissingNullability: androidx.core.widget.NestedScrollView#computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect) parameter #0:
    Missing nullability on parameter `rect` in method `computeScrollDeltaToGetChildRectOnScreen`
MissingNullability: androidx.core.widget.NestedScrollView#dispatchKeyEvent(android.view.KeyEvent) parameter #0:
    Missing nullability on parameter `event` in method `dispatchKeyEvent`
MissingNullability: androidx.core.widget.NestedScrollView#measureChildWithMargins(android.view.View, int, int, int, int) parameter #0:
    Missing nullability on parameter `child` in method `measureChildWithMargins`
MissingNullability: androidx.core.widget.NestedScrollView#onRequestFocusInDescendants(int, android.graphics.Rect) parameter #1:
    Missing nullability on parameter `previouslyFocusedRect` in method `onRequestFocusInDescendants`
MissingNullability: androidx.core.widget.NestedScrollView#onRestoreInstanceState(android.os.Parcelable) parameter #0:
    Missing nullability on parameter `state` in method `onRestoreInstanceState`
MissingNullability: androidx.core.widget.NestedScrollView#requestChildFocus(android.view.View, android.view.View) parameter #0:
    Missing nullability on parameter `child` in method `requestChildFocus`
MissingNullability: androidx.core.widget.NestedScrollView#requestChildFocus(android.view.View, android.view.View) parameter #1:
    Missing nullability on parameter `focused` in method `requestChildFocus`
MissingNullability: androidx.core.widget.NestedScrollView#requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean) parameter #1:
    Missing nullability on parameter `rectangle` in method `requestChildRectangleOnScreen`


MutableBareField: androidx.core.app.NotificationCompat.Action#actionIntent:
    Bare field actionIntent must be marked final, or moved behind accessors if mutable
MutableBareField: androidx.core.app.NotificationCompat.Action#title:
    Bare field title must be marked final, or moved behind accessors if mutable


NoClone: androidx.core.app.NotificationCompat.Action.WearableExtender#clone():
    Provide an explicit copy constructor instead of implementing `clone()`
NoClone: androidx.core.app.NotificationCompat.WearableExtender#clone():
    Provide an explicit copy constructor instead of implementing `clone()`


NotCloseable: androidx.core.app.FrameMetricsAggregator:
    Classes that release resources (stop()) should implement AutoCloseable and CloseGuard: class androidx.core.app.FrameMetricsAggregator
NotCloseable: androidx.core.util.Pools.Pool:
    Classes that release resources (release()) should implement AutoCloseable and CloseGuard: class androidx.core.util.Pools.Pool
NotCloseable: androidx.core.util.Pools.SimplePool:
    Classes that release resources (release()) should implement AutoCloseable and CloseGuard: class androidx.core.util.Pools.SimplePool
NotCloseable: androidx.core.util.Pools.SynchronizedPool:
    Classes that release resources (release()) should implement AutoCloseable and CloseGuard: class androidx.core.util.Pools.SynchronizedPool
NotCloseable: androidx.core.view.DragAndDropPermissionsCompat:
    Classes that release resources (release()) should implement AutoCloseable and CloseGuard: class androidx.core.view.DragAndDropPermissionsCompat
NotCloseable: androidx.core.view.WindowInsetsAnimationControllerCompat:
    Classes that release resources (finish()) should implement AutoCloseable and CloseGuard: class androidx.core.view.WindowInsetsAnimationControllerCompat
NotCloseable: androidx.core.widget.EdgeEffectCompat:
    Classes that release resources (finish()) should implement AutoCloseable and CloseGuard: class androidx.core.widget.EdgeEffectCompat


NullableCollection: androidx.core.app.ActivityOptionsCompat#toBundle():
    Return type of method androidx.core.app.ActivityOptionsCompat.toBundle() is a nullable collection (`android.os.Bundle`); must be non-null
NullableCollection: androidx.core.app.FrameMetricsAggregator#getMetrics():
    Return type of method androidx.core.app.FrameMetricsAggregator.getMetrics() is a nullable collection (`android.util.SparseIntArray[]`); must be non-null
NullableCollection: androidx.core.app.FrameMetricsAggregator#remove(android.app.Activity):
    Return type of method androidx.core.app.FrameMetricsAggregator.remove(android.app.Activity) is a nullable collection (`android.util.SparseIntArray[]`); must be non-null
NullableCollection: androidx.core.app.FrameMetricsAggregator#reset():
    Return type of method androidx.core.app.FrameMetricsAggregator.reset() is a nullable collection (`android.util.SparseIntArray[]`); must be non-null
NullableCollection: androidx.core.app.FrameMetricsAggregator#stop():
    Return type of method androidx.core.app.FrameMetricsAggregator.stop() is a nullable collection (`android.util.SparseIntArray[]`); must be non-null
NullableCollection: androidx.core.app.NotificationCompat#getExtras(android.app.Notification):
    Return type of method androidx.core.app.NotificationCompat.getExtras(android.app.Notification) is a nullable collection (`android.os.Bundle`); must be non-null
NullableCollection: androidx.core.app.NotificationCompat.Action#getDataOnlyRemoteInputs():
    Return type of method androidx.core.app.NotificationCompat.Action.getDataOnlyRemoteInputs() is a nullable collection (`androidx.core.app.RemoteInput[]`); must be non-null
NullableCollection: androidx.core.app.NotificationCompat.Action#getRemoteInputs():
    Return type of method androidx.core.app.NotificationCompat.Action.getRemoteInputs() is a nullable collection (`androidx.core.app.RemoteInput[]`); must be non-null
NullableCollection: androidx.core.app.ShareCompat.IntentReader#getEmailBcc():
    Return type of method androidx.core.app.ShareCompat.IntentReader.getEmailBcc() is a nullable collection (`java.lang.String[]`); must be non-null
NullableCollection: androidx.core.app.ShareCompat.IntentReader#getEmailCc():
    Return type of method androidx.core.app.ShareCompat.IntentReader.getEmailCc() is a nullable collection (`java.lang.String[]`); must be non-null
NullableCollection: androidx.core.app.ShareCompat.IntentReader#getEmailTo():
    Return type of method androidx.core.app.ShareCompat.IntentReader.getEmailTo() is a nullable collection (`java.lang.String[]`); must be non-null
NullableCollection: androidx.core.content.pm.ShortcutInfoCompat#getCategories():
    Return type of method androidx.core.content.pm.ShortcutInfoCompat.getCategories() is a nullable collection (`java.util.Set`); must be non-null
NullableCollection: androidx.core.content.pm.ShortcutInfoCompat#getExtras():
    Return type of method androidx.core.content.pm.ShortcutInfoCompat.getExtras() is a nullable collection (`android.os.PersistableBundle`); must be non-null
NullableCollection: androidx.core.net.MailTo#getHeaders():
    Return type of method androidx.core.net.MailTo.getHeaders() is a nullable collection (`java.util.Map`); must be non-null
NullableCollection: androidx.core.provider.FontRequest#getCertificates():
    Return type of method androidx.core.provider.FontRequest.getCertificates() is a nullable collection (`java.util.List`); must be non-null
NullableCollection: androidx.core.view.ContentInfoCompat#getExtras():
    Return type of method androidx.core.view.ContentInfoCompat.getExtras() is a nullable collection (`android.os.Bundle`); must be non-null
NullableCollection: androidx.core.view.ViewCompat#getOnReceiveContentMimeTypes(android.view.View):
    Return type of method androidx.core.view.ViewCompat.getOnReceiveContentMimeTypes(android.view.View) is a nullable collection (`java.lang.String[]`); must be non-null
NullableCollection: androidx.core.view.accessibility.AccessibilityNodeProviderCompat#findAccessibilityNodeInfosByText(String, int):
    Return type of method androidx.core.view.accessibility.AccessibilityNodeProviderCompat.findAccessibilityNodeInfosByText(String,int) is a nullable collection (`java.util.List`); must be non-null
NullableCollection: androidx.core.view.inputmethod.InputConnectionCompat.OnCommitContentListener#onCommitContent(androidx.core.view.inputmethod.InputContentInfoCompat, int, android.os.Bundle) parameter #2:
    Type of parameter opts in androidx.core.view.inputmethod.InputConnectionCompat.OnCommitContentListener.onCommitContent(androidx.core.view.inputmethod.InputContentInfoCompat inputContentInfo, int flags, android.os.Bundle opts) is a nullable collection (`android.os.Bundle`); must be non-null


OptionalBuilderConstructorArgument: androidx.core.app.NotificationCompat.Action.Builder#Builder(androidx.core.graphics.drawable.IconCompat, CharSequence, android.app.PendingIntent) parameter #0:
    Builder constructor arguments must be mandatory (i.e. not @Nullable): parameter icon in androidx.core.app.NotificationCompat.Action.Builder(androidx.core.graphics.drawable.IconCompat icon, CharSequence title, android.app.PendingIntent intent)
OptionalBuilderConstructorArgument: androidx.core.app.NotificationCompat.Action.Builder#Builder(androidx.core.graphics.drawable.IconCompat, CharSequence, android.app.PendingIntent) parameter #1:
    Builder constructor arguments must be mandatory (i.e. not @Nullable): parameter title in androidx.core.app.NotificationCompat.Action.Builder(androidx.core.graphics.drawable.IconCompat icon, CharSequence title, android.app.PendingIntent intent)
OptionalBuilderConstructorArgument: androidx.core.app.NotificationCompat.Action.Builder#Builder(androidx.core.graphics.drawable.IconCompat, CharSequence, android.app.PendingIntent) parameter #2:
    Builder constructor arguments must be mandatory (i.e. not @Nullable): parameter intent in androidx.core.app.NotificationCompat.Action.Builder(androidx.core.graphics.drawable.IconCompat icon, CharSequence title, android.app.PendingIntent intent)
OptionalBuilderConstructorArgument: androidx.core.app.NotificationCompat.Action.Builder#Builder(int, CharSequence, android.app.PendingIntent) parameter #1:
    Builder constructor arguments must be mandatory (i.e. not @Nullable): parameter title in androidx.core.app.NotificationCompat.Action.Builder(int icon, CharSequence title, android.app.PendingIntent intent)
OptionalBuilderConstructorArgument: androidx.core.app.NotificationCompat.Action.Builder#Builder(int, CharSequence, android.app.PendingIntent) parameter #2:
    Builder constructor arguments must be mandatory (i.e. not @Nullable): parameter intent in androidx.core.app.NotificationCompat.Action.Builder(int icon, CharSequence title, android.app.PendingIntent intent)


PairedRegistration: androidx.core.view.OneShotPreDrawListener#removeListener():
    Found removeListener but not addListener in androidx.core.view.OneShotPreDrawListener


PublicTypedef: androidx.core.app.NotificationCompat.Action.SemanticAction:
    Don't expose @IntDef: SemanticAction must be hidden.


StaticFinalBuilder: androidx.core.app.NotificationChannelCompat.Builder:
    Builder must be final: androidx.core.app.NotificationChannelCompat.Builder
StaticFinalBuilder: androidx.core.app.NotificationChannelGroupCompat.Builder:
    Builder must be final: androidx.core.app.NotificationChannelGroupCompat.Builder
StaticFinalBuilder: androidx.core.app.NotificationCompat.Builder:
    Builder must be final: androidx.core.app.NotificationCompat.Builder
StaticFinalBuilder: androidx.core.app.Person.Builder:
    Builder must be final: androidx.core.app.Person.Builder
StaticFinalBuilder: androidx.core.app.ShareCompat.IntentBuilder:
    Builder must be final: androidx.core.app.ShareCompat.IntentBuilder
StaticFinalBuilder: androidx.core.content.pm.ShortcutInfoCompat.Builder:
    Builder must be final: androidx.core.content.pm.ShortcutInfoCompat.Builder
StaticFinalBuilder: androidx.core.text.PrecomputedTextCompat.Params.Builder:
    Builder must be final: androidx.core.text.PrecomputedTextCompat.Params.Builder


StreamFiles: androidx.core.content.FileProvider#getUriForFile(android.content.Context, String, java.io.File):
    Methods accepting `File` should also accept `FileDescriptor` or streams: method androidx.core.content.FileProvider.getUriForFile(android.content.Context,String,java.io.File)
StreamFiles: androidx.core.os.EnvironmentCompat#getStorageState(java.io.File):
    Methods accepting `File` should also accept `FileDescriptor` or streams: method androidx.core.os.EnvironmentCompat.getStorageState(java.io.File)
StreamFiles: androidx.core.util.AtomicFile#AtomicFile(java.io.File):
    Methods accepting `File` should also accept `FileDescriptor` or streams: constructor androidx.core.util.AtomicFile(java.io.File)
