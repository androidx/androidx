// Signature format: 4.0
package androidx.camera.lifecycle {

  @SuppressCompatibility @RequiresOptIn @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.CLASS) public @interface ExperimentalCameraProviderConfiguration {
  }

  @RequiresApi(21) public final class ProcessCameraProvider implements androidx.camera.core.CameraProvider {
    method @MainThread public androidx.camera.core.Camera bindToLifecycle(androidx.lifecycle.LifecycleOwner lifecycleOwner, androidx.camera.core.CameraSelector cameraSelector, androidx.camera.core.UseCase?... useCases);
    method @MainThread public androidx.camera.core.Camera bindToLifecycle(androidx.lifecycle.LifecycleOwner lifecycleOwner, androidx.camera.core.CameraSelector cameraSelector, androidx.camera.core.UseCaseGroup useCaseGroup);
    method @MainThread public androidx.camera.core.ConcurrentCamera bindToLifecycle(java.util.List<androidx.camera.core.ConcurrentCamera.SingleCameraConfig?> singleCameraConfigs);
    method @SuppressCompatibility @androidx.camera.lifecycle.ExperimentalCameraProviderConfiguration public static void configureInstance(androidx.camera.core.CameraXConfig cameraXConfig);
    method public java.util.List<androidx.camera.core.CameraInfo> getAvailableCameraInfos();
    method public java.util.List<java.util.List<androidx.camera.core.CameraInfo>> getAvailableConcurrentCameraInfos();
    method public static com.google.common.util.concurrent.ListenableFuture<androidx.camera.lifecycle.ProcessCameraProvider> getInstance(android.content.Context context);
    method @kotlin.jvm.Throws(exceptionClasses=CameraInfoUnavailableException::class) public boolean hasCamera(androidx.camera.core.CameraSelector cameraSelector) throws androidx.camera.core.CameraInfoUnavailableException;
    method public boolean isBound(androidx.camera.core.UseCase useCase);
    method @MainThread public boolean isConcurrentCameraModeOn();
    method @VisibleForTesting public com.google.common.util.concurrent.ListenableFuture<java.lang.Void> shutdownAsync();
    method @MainThread public void unbind(androidx.camera.core.UseCase?... useCases);
    method @MainThread public void unbindAll();
    property public final java.util.List<java.util.List<androidx.camera.core.CameraInfo>> availableConcurrentCameraInfos;
    property @MainThread public final boolean isConcurrentCameraModeOn;
    field public static final androidx.camera.lifecycle.ProcessCameraProvider.Companion Companion;
  }

  public static final class ProcessCameraProvider.Companion {
    method @SuppressCompatibility @androidx.camera.lifecycle.ExperimentalCameraProviderConfiguration public void configureInstance(androidx.camera.core.CameraXConfig cameraXConfig);
    method public com.google.common.util.concurrent.ListenableFuture<androidx.camera.lifecycle.ProcessCameraProvider> getInstance(android.content.Context context);
  }

  public final class ProcessCameraProviderExtKt {
    method @RequiresApi(android.os.Build.VERSION_CODES.LOLLIPOP) public static suspend Object? awaitInstance(androidx.camera.lifecycle.ProcessCameraProvider.Companion, android.content.Context context, kotlin.coroutines.Continuation<? super androidx.camera.lifecycle.ProcessCameraProvider>);
  }

}

