/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import androidx.build.BundleInsideHelper
import androidx.build.Publish
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("kotlin-android")
    id("kotlin-kapt")
}

apply from: "../camera-camera2-pipe/dependencies.gradle"

BundleInsideHelper.forInsideAar(
    project,
    /* from = */ "androidx.camera.camera2.pipe",
    /* to =   */ "androidx.camera.camera2.pipe"
)

dependencies {
    implementation("androidx.core:core:1.3.2")
    implementation("androidx.concurrent:concurrent-listenablefuture-callback:1.0.0-beta01")
    bundleInside(project(path: ":camera:camera-camera2-pipe", configuration: "exportRelease"))

    // Classes and types that are needed at compile & runtime
    api("androidx.annotation:annotation:1.1.0")
    api(project(":camera:camera-core"))

    // Classes and types that are only needed at runtime
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.3.1")
    implementation("androidx.concurrent:concurrent-futures:1.0.0")
    implementation(libs.kotlinCoroutinesGuava)
    implementation(libs.kotlinStdlib)

    // Since we jarjar CameraPipe, include the transitive dependencies as implementation
    implementation(CAMERA_PIPE_DEPS.API)
    implementation(CAMERA_PIPE_DEPS.IMPLEMENTATION)

    kapt(libs.daggerCompiler)

    testImplementation(libs.testCore)
    testImplementation(libs.testRunner)
    testImplementation(libs.junit)
    testImplementation(libs.truth)
    testImplementation(libs.mockitoCore)
    testImplementation(libs.robolectric)
    testImplementation(libs.kotlinCoroutinesTest)
    testImplementation(project(":camera:camera-camera2-pipe-testing"))
    testImplementation(project(":camera:camera-testing"))
    testImplementation(project(":internal-testutils-ktx"))
    testImplementation(project(":internal-testutils-truth"))
    testImplementation("androidx.lifecycle:lifecycle-runtime-testing:2.3.1")

    androidTestImplementation(libs.multidex)
    androidTestImplementation(libs.testExtJunit)
    androidTestImplementation(libs.testRunner)
    androidTestImplementation(libs.kotlinCoroutinesAndroid)
    androidTestImplementation(libs.kotlinStdlib)
    androidTestImplementation(libs.truth)
    androidTestImplementation(projectOrArtifact(":annotation:annotation-experimental"))
    androidTestImplementation(project(":camera:camera-lifecycle"))
    androidTestImplementation(project(":camera:camera-testing"))
    androidTestImplementation(projectOrArtifact(":concurrent:concurrent-futures-ktx"))
    androidTestImplementation(project(":internal-testutils-truth"))
}

android {
    defaultConfig {
        multiDexEnabled = true
    }
    namespace "androidx.camera.camera2.pipe.integration"
}

kapt {
    javacOptions {
        option("-Adagger.fastInit=enabled")
        option("-Adagger.fullBindingGraphValidation=ERROR")
    }
}

// Allow usage of Kotlin's @OptIn.
tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }
}

androidx {
    name = "Jetpack Camera Camera Pipe Integration Library"
    publish = Publish.NONE
    mavenGroup = LibraryGroups.CAMERA
    mavenVersion = LibraryVersions.CAMERA_PIPE
    inceptionYear = "2020"
    description = "A CameraPipe implementation of CameraX, a library providing a consistent and " +
            "reliable camera foundation that enables great camera driven experiences across all " +
            "of Android."
}
